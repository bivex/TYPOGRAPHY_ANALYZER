(() => {
    'use strict';

    const ACCESSIBILITY_ANALYZER = {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WCAG –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        config: {
            wcag: {
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ WCAG
                contrastRatios: {
                    normalTextAA: 4.5, // WCAG AA –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    normalTextAAA: 7.0, // WCAG AAA –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    largeTextAA: 3.0, // WCAG AA –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (18pt+)
                    largeTextAAA: 4.5, // WCAG AAA –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    nonTextAA: 3.0, // WCAG AA –¥–ª—è –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    nonTextAAA: 4.5 // WCAG AAA –¥–ª—è –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                },
                // –†–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                textSizes: {
                    large: 18, // pt
                    largeWeightBold: 14 // pt –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                }
            },

            // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ–∫—É—Å–∞
            focusableElements: [
                'a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])',
                'textarea:not([disabled])', 'button:not([disabled])', 'iframe',
                'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex="-1"])'
            ],

            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ ARIA —Ä–æ–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            requiredRoles: {
                'img': ['img', 'presentation', 'none'],
                'button': ['button', 'link', 'menuitem'],
                'a': ['link', 'button', 'tab', 'menuitem'],
                'input': ['textbox', 'searchbox', 'button', 'checkbox', 'radio'],
                'nav': ['navigation'],
                'main': ['main'],
                'header': ['banner'],
                'footer': ['contentinfo']
            },

            // –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ ARIA –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            conflictingAria: {
                'aria-hidden': ['aria-label', 'aria-labelledby', 'aria-describedby'],
                'role=presentation': ['aria-label', 'aria-labelledby', 'aria-describedby'],
                'role=none': ['aria-label', 'aria-labelledby', 'aria-describedby']
            },

            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–∞—Å–∞–Ω–∏–π (WCAG 2.1)
            touchTargets: {
                minWidth: 44, // px
                minHeight: 44 // px
            }
        },

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        state: {
            contrastIssues: [],
            focusIssues: [],
            ariaIssues: [],
            keyboardIssues: [],
            readabilityIssues: [],
            allIssues: [],
            fixableIssues: [],
            highlightedElements: new Set(),
            wcagLevel: 'AA', // –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏
            colorCache: new Map() // –ö–µ—à –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        },

        // –ì–ª–∞–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        analyzeAccessibility() {
            console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WCAG...');

            this.analyzeColorContrast();
            this.analyzeFocusability();
            this.analyzeKeyboardNavigation();
            this.analyzeAriaCompliance();
            this.analyzeReadability();
            this.analyzeTouchTargets();
            this.analyzeScreenReaderCompatibility();
        },

        // === –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–†–ê–°–¢–ù–û–°–¢–ò –¶–í–ï–¢–û–í ===
        analyzeColorContrast() {
            console.log('üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏...');

            const textElements = document.querySelectorAll('*');

            Array.from(textElements).forEach(element => {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if (!element.textContent?.trim() || ['SCRIPT', 'STYLE', 'META', 'LINK', 'HEAD'].includes(element.tagName)) {
                    return;
                }

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if (element.offsetParent === null && element.tagName !== 'HTML') return;

                const computedStyle = getComputedStyle(element);

                // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞
                const textColor = this.parseColor(computedStyle.color);
                const backgroundColor = this.getEffectiveBackgroundColor(element);

                if (!textColor || !backgroundColor) return;

                // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
                const contrastRatio = this.calculateContrastRatio(textColor, backgroundColor);
                const fontSize = this.getFontSizeInPt(computedStyle);
                const fontWeight = computedStyle.fontWeight;

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
                const requirements = this.getContrastRequirements(fontSize, fontWeight, element);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ WCAG
                const wcagResults = this.checkWCAGCompliance(contrastRatio, requirements);

                if (!wcagResults.passAA || !wcagResults.passAAA) {
                    this.addContrastIssue(element, {
                        textColor,
                        backgroundColor,
                        contrastRatio,
                        fontSize,
                        fontWeight,
                        requirements,
                        wcagResults,
                        computedStyle
                    });
                }
            });
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        getEffectiveBackgroundColor(element) {
            let current = element;

            while (current && current !== document.body) {
                const style = getComputedStyle(current);
                const bgColor = this.parseColor(style.backgroundColor);

                if (bgColor && bgColor.a > 0) {
                    // –ï—Å–ª–∏ —Ñ–æ–Ω –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                    if (bgColor.a === 1) {
                        return bgColor;
                    }

                    // –ï—Å–ª–∏ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π, —Å–º–µ—à–∏–≤–∞–µ–º —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º
                    const parentBg = this.getEffectiveBackgroundColor(current.parentElement);
                    if (parentBg) {
                        return this.blendColors(bgColor, parentBg);
                    }
                }

                current = current.parentElement;
            }

            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–ª—ã–π —Ñ–æ–Ω
            return {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            };
        },

        // –°–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        blendColors(foreground, background) {
            const alpha = foreground.a;
            const invAlpha = 1 - alpha;

            return {
                r: Math.round(foreground.r * alpha + background.r * invAlpha),
                g: Math.round(foreground.g * alpha + background.g * invAlpha),
                b: Math.round(foreground.b * alpha + background.b * invAlpha),
                a: 1
            };
        },

        // –ü–∞—Ä—Å–∏–Ω–≥ CSS —Ü–≤–µ—Ç–∞ –≤ RGB
        parseColor(colorString) {
            if (this.state.colorCache.has(colorString)) {
                return this.state.colorCache.get(colorString);
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–∞
            const div = document.createElement('div');
            div.style.color = colorString;
            document.body.appendChild(div);

            const computed = getComputedStyle(div).color;
            document.body.removeChild(div);

            let result = null;

            // –ü–∞—Ä—Å–∏–º rgb/rgba
            const rgbMatch = computed.match(/rgba?\(([^)]+)\)/);
            if (rgbMatch) {
                const values = rgbMatch[1].split(',').map(v => parseFloat(v.trim()));
                result = {
                    r: values[0] || 0,
                    g: values[1] || 0,
                    b: values[2] || 0,
                    a: values[3] !== undefined ? values[3] : 1
                };
            }

            this.state.colorCache.set(colorString, result);
            return result;
        },

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ WCAG
        calculateContrastRatio(color1, color2) {
            const l1 = this.getRelativeLuminance(color1);
            const l2 = this.getRelativeLuminance(color2);

            const lighter = Math.max(l1, l2);
            const darker = Math.min(l1, l2);

            return (lighter + 0.05) / (darker + 0.05);
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —è—Ä–∫–æ—Å—Ç–∏
        getRelativeLuminance(color) {
            const rsRGB = color.r / 255;
            const gsRGB = color.g / 255;
            const bsRGB = color.b / 255;

            const r = rsRGB <= 0.03928 ? rsRGB / 12.92 : Math.pow((rsRGB + 0.055) / 1.055, 2.4);
            const g = gsRGB <= 0.03928 ? gsRGB / 12.92 : Math.pow((gsRGB + 0.055) / 1.055, 2.4);
            const b = bsRGB <= 0.03928 ? bsRGB / 12.92 : Math.pow((bsRGB + 0.055) / 1.055, 2.4);

            return 0.2126 * r + 0.7152 * g + 0.0722 * b;
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö
        getFontSizeInPt(computedStyle) {
            const fontSize = parseFloat(computedStyle.fontSize);
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º px –≤ pt (1pt = 4/3 px)
            return fontSize * 0.75;
        },

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
        getContrastRequirements(fontSize, fontWeight, element) {
            const isLargeText = fontSize >= this.config.wcag.textSizes.large ||
                (fontSize >= this.config.wcag.textSizes.largeWeightBold &&
                    (fontWeight === 'bold' || parseInt(fontWeight) >= 700));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–º (–∫–Ω–æ–ø–∫–∏, –∏–∫–æ–Ω–∫–∏ –∏ —Ç.–¥.)
            const isNonText = element.tagName === 'BUTTON' ||
                element.hasAttribute('role') && ['button', 'tab', 'menuitem'].includes(element.getAttribute('role'));

            if (isNonText) {
                return {
                    type: 'non-text',
                    aa: this.config.wcag.contrastRatios.nonTextAA,
                    aaa: this.config.wcag.contrastRatios.nonTextAAA
                };
            }

            if (isLargeText) {
                return {
                    type: 'large-text',
                    aa: this.config.wcag.contrastRatios.largeTextAA,
                    aaa: this.config.wcag.contrastRatios.largeTextAAA
                };
            }

            return {
                type: 'normal-text',
                aa: this.config.wcag.contrastRatios.normalTextAA,
                aaa: this.config.wcag.contrastRatios.normalTextAAA
            };
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è WCAG
        checkWCAGCompliance(contrastRatio, requirements) {
            return {
                ratio: contrastRatio,
                passAA: contrastRatio >= requirements.aa,
                passAAA: contrastRatio >= requirements.aaa,
                requirements
            };
        },

        // === –ê–ù–ê–õ–ò–ó –§–û–ö–£–°–ò–†–£–ï–ú–û–°–¢–ò ===
        analyzeFocusability() {
            console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º–æ—Å—Ç–∏...');

            const focusableElements = document.querySelectorAll(
                this.config.focusableElements.join(',')
            );

            Array.from(focusableElements).forEach(element => {
                const computedStyle = getComputedStyle(element);
                const tabindex = element.getAttribute('tabindex');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å outline –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
                const hasVisibleOutline = this.checkFocusOutline(element);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                const isKeyboardAccessible = this.checkKeyboardAccessibility(element);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Å–∞–Ω–∏—è
                const touchTargetSize = this.getTouchTargetSize(element);

                if (!hasVisibleOutline || !isKeyboardAccessible || !touchTargetSize.adequate) {
                    this.addFocusIssue(element, {
                        hasVisibleOutline,
                        isKeyboardAccessible,
                        touchTargetSize,
                        tabindex,
                        computedStyle
                    });
                }
            });
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ outline –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        checkFocusOutline(element) {
            const style = getComputedStyle(element);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º outline
            const outlineWidth = style.outlineWidth;
            const outlineStyle = style.outlineStyle;
            const outlineColor = style.outlineColor;

            // –ï—Å–ª–∏ outline —è–≤–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
            if (outlineStyle === 'none' || outlineWidth === '0px') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∞
                const hasBoxShadow = style.boxShadow && style.boxShadow !== 'none';
                const hasBorder = style.borderWidth && style.borderWidth !== '0px';
                const hasBackground = style.backgroundColor && style.backgroundColor !== 'transparent';

                return hasBoxShadow || hasBorder || hasBackground;
            }

            return true;
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        checkKeyboardAccessibility(element) {
            const tabindex = element.getAttribute('tabindex');
            const role = element.getAttribute('role');
            const tagName = element.tagName.toLowerCase();

            // –≠–ª–µ–º–µ–Ω—Ç—ã —Å tabindex="-1" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if (tabindex === '-1') {
                // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º–∏
                const allowedRoles = ['dialog', 'alertdialog', 'menu', 'menubar'];
                if (!role || !allowedRoles.includes(role)) {
                    return false;
                }
            }

            // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ href –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            if (tagName === 'a' && !element.href) {
                const hasClickHandler = element.onclick ||
                    element.addEventListener ||
                    element.getAttribute('onclick');
                return !!hasClickHandler;
            }

            return true;
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Å–∞–Ω–∏—è
        getTouchTargetSize(element) {
            const rect = element.getBoundingClientRect();
            const {
                minWidth,
                minHeight
            } = this.config.touchTargets;

            const adequate = rect.width >= minWidth && rect.height >= minHeight;

            return {
                width: Math.round(rect.width),
                height: Math.round(rect.height),
                adequate,
                requiredWidth: minWidth,
                requiredHeight: minHeight
            };
        },

        // === –ê–ù–ê–õ–ò–ó –ù–ê–í–ò–ì–ê–¶–ò–ò –° –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
        analyzeKeyboardNavigation() {
            console.log('‚å®Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å tabindex
            const tabbableElements = Array.from(document.querySelectorAll('[tabindex]'))
                .filter(el => el.getAttribute('tabindex') !== '-1')
                .sort((a, b) => {
                    const tabA = parseInt(a.getAttribute('tabindex')) || 0;
                    const tabB = parseInt(b.getAttribute('tabindex')) || 0;
                    return tabA - tabB;
                });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –ø–æ—Ä—è–¥–∫–∞ —Ç–∞–±—É–ª—è—Ü–∏–∏
            this.checkTabOrder(tabbableElements);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≤—É—à–∫–∏ —Ñ–æ–∫—É—Å–∞ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
            this.checkFocusTraps();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º skip links
            this.checkSkipLinks();
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ —Ç–∞–±—É–ª—è—Ü–∏–∏
        checkTabOrder(elements) {
            let previousTabindex = 0;
            let hasLogicalOrder = true;

            elements.forEach((element, index) => {
                const tabindex = parseInt(element.getAttribute('tabindex')) || 0;

                // –ü—Ä–æ–ø—É—Å–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —Ç–∞–±—É–ª—è—Ü–∏–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
                if (tabindex > 0 && tabindex !== previousTabindex + 1 && index > 0) {
                    hasLogicalOrder = false;
                }

                previousTabindex = tabindex;
            });

            if (!hasLogicalOrder && elements.length > 0) {
                this.addKeyboardIssue('tab-order', '–ù–µ–ª–æ–≥–∏—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ç–∞–±—É–ª—è—Ü–∏–∏', elements);
            }
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≤—É—à–µ–∫ —Ñ–æ–∫—É—Å–∞
        checkFocusTraps() {
            const modals = document.querySelectorAll('[role="dialog"], [role="alertdialog"], .modal');

            Array.from(modals).forEach(modal => {
                const isVisible = getComputedStyle(modal).display !== 'none';
                if (!isVisible) return;

                const focusableInModal = modal.querySelectorAll(
                    this.config.focusableElements.join(',')
                );

                if (focusableInModal.length === 0) {
                    this.addKeyboardIssue('focus-trap', '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–µ–∑ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤', [modal]);
                }
            });
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ skip links
        checkSkipLinks() {
            const skipLinks = document.querySelectorAll('a[href^="#"]:first-child, .skip-link, [class*="skip"]');

            if (skipLinks.length === 0) {
                this.addKeyboardIssue('skip-links', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç skip links –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', []);
            }
        },

        // === –ê–ù–ê–õ–ò–ó ARIA –ò –°–ï–ú–ê–ù–¢–ò–ö–ò ===
        analyzeAriaCompliance() {
            console.log('üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...');

            const allElements = document.querySelectorAll('*');

            Array.from(allElements).forEach(element => {
                this.checkAriaLabels(element);
                this.checkAriaRoles(element);
                this.checkAriaStates(element);
                this.checkAriaConflicts(element);
                this.checkRequiredAriaAttributes(element);
            });
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA –º–µ—Ç–æ–∫
        checkAriaLabels(element) {
            const tagName = element.tagName.toLowerCase();
            const role = element.getAttribute('role');

            // –≠–ª–µ–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–º–µ–Ω–∏
            const needsAccessibleName = [
                'button', 'a', 'input', 'textarea', 'select'
            ].includes(tagName) || ['button', 'link', 'textbox', 'combobox', 'listbox', 'tab', 'menuitem'].includes(role);

            if (needsAccessibleName) {
                const accessibleName = this.getAccessibleName(element);

                if (!accessibleName) {
                    this.addAriaIssue(element, 'missing-accessible-name',
                        `–≠–ª–µ–º–µ–Ω—Ç ${tagName} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–º–µ–Ω–∏`);
                }
            }
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        getAccessibleName(element) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ spec

            // aria-labelledby
            const labelledBy = element.getAttribute('aria-labelledby');
            if (labelledBy) {
                const referencedElements = labelledBy.split(' ')
                    .map(id => document.getElementById(id))
                    .filter(Boolean);

                if (referencedElements.length > 0) {
                    return referencedElements.map(el => el.textContent?.trim()).join(' ');
                }
            }

            // aria-label
            const ariaLabel = element.getAttribute('aria-label');
            if (ariaLabel?.trim()) {
                return ariaLabel.trim();
            }

            // –î–ª—è input —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - —Å–≤—è–∑–∞–Ω–Ω—ã–π label
            if (element.tagName === 'INPUT') {
                const id = element.id;
                if (id) {
                    const label = document.querySelector(`label[for="${id}"]`);
                    if (label) {
                        return label.textContent?.trim();
                    }
                }

                // –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π label
                const parentLabel = element.closest('label');
                if (parentLabel) {
                    return parentLabel.textContent?.trim();
                }

                // placeholder –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
                const placeholder = element.getAttribute('placeholder');
                if (placeholder?.trim()) {
                    return placeholder.trim();
                }
            }

            // title –∞—Ç—Ä–∏–±—É—Ç
            const title = element.getAttribute('title');
            if (title?.trim()) {
                return title.trim();
            }

            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            const textContent = element.textContent?.trim();
            if (textContent) {
                return textContent;
            }

            return null;
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA —Ä–æ–ª–µ–π
        checkAriaRoles(element) {
            const role = element.getAttribute('role');
            const tagName = element.tagName.toLowerCase();

            if (role) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
                const validRoles = this.getValidAriaRoles();
                if (!validRoles.includes(role)) {
                    this.addAriaIssue(element, 'invalid-role',
                        `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è ARIA —Ä–æ–ª—å: ${role}`);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—É
                const requiredRoles = this.config.requiredRoles[tagName];
                if (requiredRoles && !requiredRoles.includes(role)) {
                    this.addAriaIssue(element, 'inappropriate-role',
                        `–†–æ–ª—å ${role} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${tagName}`);
                }
            }
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö ARIA —Ä–æ–ª–µ–π
        getValidAriaRoles() {
            return [
                // Abstract roles (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
                'command', 'composite', 'input', 'landmark', 'range', 'roletype', 'section',
                'sectionhead', 'select', 'structure', 'widget', 'window',

                // Widget roles
                'alert', 'alertdialog', 'application', 'article', 'banner', 'button',
                'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo',
                'definition', 'dialog', 'directory', 'document', 'form', 'grid',
                'gridcell', 'group', 'heading', 'img', 'link', 'list', 'listbox',
                'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar',
                'menuitem', 'menuitemcheckbox', 'menuitemradio', 'navigation', 'note',
                'option', 'presentation', 'progressbar', 'radio', 'radiogroup',
                'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'search',
                'separator', 'slider', 'spinbutton', 'status', 'tab', 'tablist',
                'tabpanel', 'textbox', 'timer', 'toolbar', 'tooltip', 'tree',
                'treegrid', 'treeitem', 'none'
            ];
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ARIA —Å–æ—Å—Ç–æ—è–Ω–∏–π
        checkAriaStates(element) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–æ–ª–µ–π
            const role = element.getAttribute('role') || this.getImplicitRole(element);

            const requiredStates = this.getRequiredAriaStates(role);

            requiredStates.forEach(state => {
                if (!element.hasAttribute(state)) {
                    this.addAriaIssue(element, 'missing-required-state',
                        `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç ${state} –¥–ª—è —Ä–æ–ª–∏ ${role}`);
                }
            });
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—è–≤–Ω–æ–π —Ä–æ–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        getImplicitRole(element) {
            const tagName = element.tagName.toLowerCase();
            const type = element.getAttribute('type');

            const implicitRoles = {
                'button': 'button',
                'a': element.href ? 'link' : null,
                'input': {
                    'button': 'button',
                    'checkbox': 'checkbox',
                    'radio': 'radio',
                    'range': 'slider',
                    'text': 'textbox',
                    'email': 'textbox',
                    'password': 'textbox',
                    'search': 'searchbox',
                    'tel': 'textbox',
                    'url': 'textbox'
                } [type] || 'textbox',
                'textarea': 'textbox',
                'select': 'combobox',
                'nav': 'navigation',
                'main': 'main',
                'header': 'banner',
                'footer': 'contentinfo',
                'aside': 'complementary',
                'section': 'region',
                'article': 'article',
                'form': 'form',
                'img': 'img',
                'h1': 'heading',
                'h2': 'heading',
                'h3': 'heading',
                'h4': 'heading',
                'h5': 'heading',
                'h6': 'heading'
            };

            return implicitRoles[tagName] || null;
        },

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö ARIA —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏
        getRequiredAriaStates(role) {
            const requiredStates = {
                'checkbox': ['aria-checked'],
                'radio': ['aria-checked'],
                'menuitemcheckbox': ['aria-checked'],
                'menuitemradio': ['aria-checked'],
                'option': ['aria-selected'],
                'tab': ['aria-selected'],
                'button': [], // –ú–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å aria-pressed –¥–ª—è toggle buttons
                'combobox': ['aria-expanded'],
                'listbox': ['aria-multiselectable'],
                'tree': ['aria-multiselectable'],
                'treegrid': ['aria-multiselectable'],
                'grid': ['aria-multiselectable'],
                'tablist': ['aria-orientation'],
                'slider': ['aria-valuenow', 'aria-valuemin', 'aria-valuemax'],
                'spinbutton': ['aria-valuenow', 'aria-valuemin', 'aria-valuemax'],
                'progressbar': ['aria-valuenow', 'aria-valuemin', 'aria-valuemax'],
                'scrollbar': ['aria-controls', 'aria-valuenow', 'aria-valuemin', 'aria-valuemax']
            };

            return requiredStates[role] || [];
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ARIA
        checkAriaConflicts(element) {
            Object.entries(this.config.conflictingAria).forEach(([attr, conflictingAttrs]) => {
                if (element.hasAttribute(attr) ||
                    (attr.startsWith('role=') && element.getAttribute('role') === attr.split('=')[1])) {

                    const conflicts = conflictingAttrs.filter(conflictAttr =>
                        element.hasAttribute(conflictAttr)
                    );

                    if (conflicts.length > 0) {
                        this.addAriaIssue(element, 'aria-conflict',
                            `–ö–æ–Ω—Ñ–ª–∏–∫—Ç ARIA: ${attr} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å ${conflicts.join(', ')}`);
                    }
                }
            });
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        checkRequiredAriaAttributes(element) {
            const role = element.getAttribute('role');

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π
            if (role === 'img' && !element.hasAttribute('alt') && !element.hasAttribute('aria-label')) {
                this.addAriaIssue(element, 'missing-image-description',
                    '–≠–ª–µ–º–µ–Ω—Ç —Å —Ä–æ–ª—å—é img –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å alt –∏–ª–∏ aria-label');
            }

            if (role === 'button' && element.hasAttribute('aria-pressed')) {
                const pressed = element.getAttribute('aria-pressed');
                if (!['true', 'false', 'mixed'].includes(pressed)) {
                    this.addAriaIssue(element, 'invalid-aria-value',
                        `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ aria-pressed: ${pressed}`);
                }
            }
        },

        // === –ê–ù–ê–õ–ò–ó –ß–ò–¢–ê–ï–ú–û–°–¢–ò ===
        analyzeReadability() {
            console.log('üìñ –ê–Ω–∞–ª–∏–∑ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏...');

            const textElements = document.querySelectorAll('p, div, span, h1, h2, h3, h4, h5, h6, li, td, th');

            Array.from(textElements).forEach(element => {
                const text = element.textContent?.trim();
                if (!text || text.length < 10) return;

                const readabilityMetrics = this.calculateReadabilityMetrics(text, element);

                if (readabilityMetrics.hasIssues) {
                    this.addReadabilityIssue(element, readabilityMetrics);
                }
            });
        },

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        calculateReadabilityMetrics(text, element) {
            const style = getComputedStyle(element);
            const fontSize = parseFloat(style.fontSize);
            const lineHeight = parseFloat(style.lineHeight) || fontSize * 1.2;
            const letterSpacing = parseFloat(style.letterSpacing) || 0;

            // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
            const words = text.split(/\s+/).filter(word => word.length > 0);
            const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
            const avgWordsPerSentence = sentences.length > 0 ? words.length / sentences.length : 0;
            const avgCharsPerWord = words.reduce((sum, word) => sum + word.length, 0) / words.length;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
            const lineLength = this.estimateLineLength(text, element);

            // –§–ª–µ—à –∏–Ω–¥–µ–∫—Å —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            const fleschScore = this.calculateFleschScore(words.length, sentences.length, text);

            const issues = [];
            let hasIssues = false;

            // –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            if (avgWordsPerSentence > 25) {
                issues.push('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (>25 —Å–ª–æ–≤)');
                hasIssues = true;
            }

            if (avgCharsPerWord > 7) {
                issues.push('–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ (—Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ >7 —Å–∏–º–≤–æ–ª–æ–≤)');
                hasIssues = true;
            }

            if (lineLength > 75) {
                issues.push('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (>75 —Å–∏–º–≤–æ–ª–æ–≤)');
                hasIssues = true;
            }

            if (fontSize < 12) {
                issues.push('–°–ª–∏—à–∫–æ–º –º–µ–ª–∫–∏–π —à—Ä–∏—Ñ—Ç (<12px)');
                hasIssues = true;
            }

            const lineHeightRatio = lineHeight / fontSize;
            if (lineHeightRatio < 1.2) {
                issues.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (<1.2)');
                hasIssues = true;
            }

            if (fleschScore < 30) {
                issues.push('–û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç (Flesch < 30)');
                hasIssues = true;
            } else if (fleschScore < 50) {
                issues.push('–°–ª–æ–∂–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç (Flesch < 50)');
                hasIssues = true;
            }

            return {
                hasIssues,
                issues,
                metrics: {
                    wordCount: words.length,
                    sentenceCount: sentences.length,
                    avgWordsPerSentence: Math.round(avgWordsPerSentence * 10) / 10,
                    avgCharsPerWord: Math.round(avgCharsPerWord * 10) / 10,
                    lineLength,
                    fontSize,
                    lineHeight,
                    lineHeightRatio: Math.round(lineHeightRatio * 100) / 100,
                    fleschScore: Math.round(fleschScore)
                }
            };
        },

        // –û—Ü–µ–Ω–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
        estimateLineLength(text, element) {
            const rect = element.getBoundingClientRect();
            const style = getComputedStyle(element);
            const fontSize = parseFloat(style.fontSize);

            // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: —Å—Ä–µ–¥–Ω—è—è —à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞ = fontSize * 0.6
            const avgCharWidth = fontSize * 0.6;
            const availableWidth = rect.width - parseFloat(style.paddingLeft) - parseFloat(style.paddingRight);

            return Math.floor(availableWidth / avgCharWidth);
        },

        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –§–ª–µ—à–∞
        calculateFleschScore(wordCount, sentenceCount, text) {
            if (sentenceCount === 0 || wordCount === 0) return 100;

            const avgSentenceLength = wordCount / sentenceCount;
            const syllableCount = this.estimateSyllables(text);
            const avgSyllablesPerWord = syllableCount / wordCount;

            return 206.835 - (1.015 * avgSentenceLength) - (84.6 * avgSyllablesPerWord);
        },

        // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≥–æ–≤
        estimateSyllables(text) {
            const words = text.toLowerCase().match(/[–∞-—è—ë]+/g) || [];
            let syllables = 0;

            words.forEach(word => {
                // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≥–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                const vowels = word.match(/[–∞–µ—ë–∏–æ—É—ã—ç—é—è]/g) || [];
                syllables += Math.max(1, vowels.length);
            });

            return syllables;
        },

        // === –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í –ö–ê–°–ê–ù–ò–ô ===
        analyzeTouchTargets() {
            console.log('üëÜ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Å–∞–Ω–∏–π...');

            const interactiveElements = document.querySelectorAll(
                'button, a, input, [role="button"], [role="link"], [role="tab"], [role="menuitem"], [onclick]'
            );

            Array.from(interactiveElements).forEach(element => {
                const size = this.getTouchTargetSize(element);

                if (!size.adequate) {
                    this.addTouchTargetIssue(element, size);
                }
            });
        },

        // === –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–û –°–ö–†–ò–ù-–†–ò–î–ï–†–ê–ú–ò ===
        analyzeScreenReaderCompatibility() {
            console.log('üîä –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä–∞–º–∏...');

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            this.checkHeadingStructure();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–æ–≤
            this.checkListStructure();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            this.checkTableStructure();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
            this.checkFormStructure();
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        checkHeadingStructure() {
            const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
            const headingLevels = Array.from(headings).map(h => ({
                level: parseInt(h.tagName.charAt(1)),
                element: h,
                text: h.textContent?.trim() || ''
            }));

            if (headingLevels.length === 0) {
                this.addScreenReaderIssue('no-headings', '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤', []);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ —Å H1
            if (headingLevels[0].level !== 1) {
                this.addScreenReaderIssue('no-h1-first',
                    '–ü–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ H1', [headingLevels[0].element]);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            for (let i = 1; i < headingLevels.length; i++) {
                const current = headingLevels[i];
                const previous = headingLevels[i - 1];

                if (current.level > previous.level + 1) {
                    this.addScreenReaderIssue('heading-skip',
                        `–ü—Ä–æ–ø—É—Å–∫ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏: H${previous.level} ‚Üí H${current.level}`,
                        [current.element]);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headingLevels.forEach(heading => {
                if (!heading.text) {
                    this.addScreenReaderIssue('empty-heading',
                        '–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', [heading.element]);
                }
            });
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–∏—Å–∫–æ–≤
        checkListStructure() {
            const lists = document.querySelectorAll('ul, ol, dl');

            Array.from(lists).forEach(list => {
                const tagName = list.tagName.toLowerCase();
                let validChildren;

                if (tagName === 'ul' || tagName === 'ol') {
                    validChildren = list.querySelectorAll(':scope > li');
                    const allChildren = Array.from(list.children);
                    const invalidChildren = allChildren.filter(child => child.tagName !== 'LI');

                    if (invalidChildren.length > 0) {
                        this.addScreenReaderIssue('invalid-list-children',
                            `–°–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã`, [list]);
                    }

                    if (validChildren.length === 0) {
                        this.addScreenReaderIssue('empty-list', '–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫', [list]);
                    }
                }

                if (tagName === 'dl') {
                    const terms = list.querySelectorAll('dt');
                    const definitions = list.querySelectorAll('dd');

                    if (terms.length === 0 || definitions.length === 0) {
                        this.addScreenReaderIssue('incomplete-definition-list',
                            '–ù–µ–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π (–Ω–µ—Ç dt –∏–ª–∏ dd)', [list]);
                    }
                }
            });
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
        checkTableStructure() {
            const tables = document.querySelectorAll('table');

            Array.from(tables).forEach(table => {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
                const headers = table.querySelectorAll('th');
                const caption = table.querySelector('caption');

                if (headers.length === 0) {
                    this.addScreenReaderIssue('table-no-headers',
                        '–¢–∞–±–ª–∏—Ü–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (th)', [table]);
                }

                if (!caption && !table.hasAttribute('aria-label') && !table.hasAttribute('aria-labelledby')) {
                    this.addScreenReaderIssue('table-no-caption',
                        '–¢–∞–±–ª–∏—Ü–∞ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è (caption, aria-label –∏–ª–∏ aria-labelledby)', [table]);
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ scope –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                const complexTable = table.querySelectorAll('tr').length > 3 ||
                    table.querySelectorAll('th').length > 3;

                if (complexTable) {
                    const headersWithScope = table.querySelectorAll('th[scope]');
                    if (headersWithScope.length === 0) {
                        this.addScreenReaderIssue('table-missing-scope',
                            '–°–ª–æ–∂–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–µ–∑ scope –∞—Ç—Ä–∏–±—É—Ç–æ–≤', [table]);
                    }
                }
            });
        },

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–æ—Ä–º
        checkFormStructure() {
            const forms = document.querySelectorAll('form');

            Array.from(forms).forEach(form => {
                const inputs = form.querySelectorAll('input, textarea, select');

                Array.from(inputs).forEach(input => {
                    const type = input.type;

                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º hidden –∏ submit —ç–ª–µ–º–µ–Ω—Ç—ã
                    if (type === 'hidden' || type === 'submit' || type === 'button') return;

                    const hasLabel = this.getAccessibleName(input);

                    if (!hasLabel) {
                        this.addScreenReaderIssue('input-no-label',
                            '–ü–æ–ª–µ —Ñ–æ—Ä–º—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏', [input]);
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
                    if (type === 'radio') {
                        const name = input.name;
                        const radioGroup = form.querySelectorAll(`input[type="radio"][name="${name}"]`);
                        const fieldset = input.closest('fieldset');

                        if (radioGroup.length > 1 && !fieldset) {
                            this.addScreenReaderIssue('radio-no-fieldset',
                                '–ì—Ä—É–ø–ø–∞ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –±–µ–∑ fieldset', [input]);
                        }
                    }
                });
            });
        },

        // === –ú–ï–¢–û–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú ===
        addContrastIssue(element, data) {
            const severity = !data.wcagResults.passAA ? 'critical' : 'warning';
            const issueType = data.wcagResults.passAA ? 'contrast-aaa' : 'contrast-aa';

            this.state.contrastIssues.push({
                element,
                severity,
                type: 'contrast',
                data
            });

            this.createFixableIssue(
                issueType,
                severity,
                [element], {
                    'current-ratio': data.contrastRatio.toFixed(2),
                    'required-ratio': data.requirements.aa.toFixed(1),
                    'text-color': this.colorToHex(data.textColor),
                    'bg-color': this.colorToHex(data.backgroundColor)
                },
                this.suggestContrastFix(data),
                `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç ${data.contrastRatio.toFixed(2)}:1. ${data.requirements.type === 'normal-text' ? '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç' : data.requirements.type === 'large-text' ? '–ö—Ä—É–ø–Ω—ã–π —Ç–µ–∫—Å—Ç' : '–ù–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç'} —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º ${data.requirements.aa}:1 –¥–ª—è WCAG AA.`
            );
        },

        addFocusIssue(element, data) {
            const severity = !data.hasVisibleOutline || !data.isKeyboardAccessible ? 'critical' : 'warning';

            this.state.focusIssues.push({
                element,
                severity,
                type: 'focus',
                data
            });

            let issues = [];
            if (!data.hasVisibleOutline) issues.push('–Ω–µ—Ç –≤–∏–¥–∏–º–æ–≥–æ outline');
            if (!data.isKeyboardAccessible) issues.push('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
            if (!data.touchTargetSize.adequate) issues.push('–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞—Å–∞–Ω–∏—è');

            this.createFixableIssue(
                'focus-accessibility',
                severity,
                [element], {
                    'outline': data.hasVisibleOutline ? 'present' : 'missing',
                    'keyboard-accessible': data.isKeyboardAccessible ? 'yes' : 'no',
                    'touch-size': `${data.touchTargetSize.width}x${data.touchTargetSize.height}px`
                }, {
                    'outline': '2px solid #005fcc',
                    'min-width': '44px',
                    'min-height': '44px',
                    'cursor': 'pointer'
                },
                `–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º–æ—Å—Ç—å—é: ${issues.join(', ')}.`
            );
        },

        addAriaIssue(element, type, description) {
            const severity = ['missing-accessible-name', 'missing-required-state', 'aria-conflict'].includes(type) ? 'critical' : 'warning';

            this.state.ariaIssues.push({
                element,
                severity,
                type,
                description
            });

            this.createFixableIssue(
                type,
                severity,
                [element], {
                    issue: description
                },
                this.suggestAriaFix(element, type),
                description
            );
        },

        addKeyboardIssue(type, description, elements) {
            this.state.keyboardIssues.push({
                type,
                description,
                elements,
                severity: 'warning'
            });
        },

        addReadabilityIssue(element, metrics) {
            this.state.readabilityIssues.push({
                element,
                severity: 'info',
                type: 'readability',
                metrics
            });

            this.createFixableIssue(
                'readability-issues',
                'info',
                [element], {
                    'font-size': `${metrics.metrics.fontSize}px`,
                    'line-height': metrics.metrics.lineHeight,
                    'issues': metrics.issues.join('; ')
                }, {
                    'font-size': Math.max(14, metrics.metrics.fontSize) + 'px',
                    'line-height': Math.max(1.4, metrics.metrics.lineHeightRatio).toFixed(1),
                    'max-width': '75ch'
                },
                `–ü—Ä–æ–±–ª–µ–º—ã —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏: ${metrics.issues.join(', ')}.`
            );
        },

        addTouchTargetIssue(element, size) {
            this.createFixableIssue(
                'touch-target-size',
                'warning',
                [element], {
                    'width': `${size.width}px`,
                    'height': `${size.height}px`
                }, {
                    'min-width': `${size.requiredWidth}px`,
                    'min-height': `${size.requiredHeight}px`,
                    'padding': '8px'
                },
                `–†–∞–∑–º–µ—Ä –∫–∞—Å–∞–Ω–∏—è ${size.width}x${size.height}px –º–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ ${size.requiredWidth}x${size.requiredHeight}px.`
            );
        },

        addScreenReaderIssue(type, description, elements) {
            const severity = ['no-headings', 'input-no-label', 'table-no-headers'].includes(type) ? 'critical' : 'warning';

            this.state.allIssues.push({
                type: 'screen-reader',
                subType: type,
                description,
                elements,
                severity
            });
        },

        // === –ú–ï–¢–û–î–´ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===
        suggestContrastFix(data) {
            const {
                textColor,
                backgroundColor,
                requirements
            } = data;
            const requiredRatio = requirements.aa;

            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ–Ω–∞
            const darkerText = this.adjustColorForContrast(textColor, backgroundColor, requiredRatio, 'darken');
            const lighterBg = this.adjustColorForContrast(backgroundColor, textColor, requiredRatio, 'lighten');

            return {
                'color': this.colorToHex(darkerText),
                'background-color': this.colorToHex(lighterBg),
                'alternative-1': `color: ${this.colorToHex(darkerText)}`,
                'alternative-2': `background-color: ${this.colorToHex(lighterBg)}`
            };
        },

        suggestAriaFix(element, type) {
            const tagName = element.tagName.toLowerCase();

            const suggestions = {
                'missing-accessible-name': {
                    'aria-label': '–û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞',
                    'alternative': tagName === 'input' ? '–î–æ–±–∞–≤–∏—Ç—å <label>' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ'
                },
                'missing-required-state': {
                    'aria-expanded': 'false',
                    'aria-checked': 'false',
                    'aria-selected': 'false'
                },
                'invalid-role': {
                    'remove-role': '–£–¥–∞–ª–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é —Ä–æ–ª—å',
                    'correct-role': this.getImplicitRole(element) || 'button'
                },
                'aria-conflict': {
                    'action': '–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã'
                }
            };

            return suggestions[type] || {
                'review': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
            };
        },

        // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
        adjustColorForContrast(color, bgColor, targetRatio, direction) {
            let adjustedColor = {
                ...color
            };
            let currentRatio = this.calculateContrastRatio(adjustedColor, bgColor);

            const step = direction === 'darken' ? -10 : 10;
            let iterations = 0;
            const maxIterations = 25;

            while (currentRatio < targetRatio && iterations < maxIterations) {
                if (direction === 'darken') {
                    adjustedColor.r = Math.max(0, adjustedColor.r + step);
                    adjustedColor.g = Math.max(0, adjustedColor.g + step);
                    adjustedColor.b = Math.max(0, adjustedColor.b + step);
                } else {
                    adjustedColor.r = Math.min(255, adjustedColor.r + step);
                    adjustedColor.g = Math.min(255, adjustedColor.g + step);
                    adjustedColor.b = Math.min(255, adjustedColor.b + step);
                }

                currentRatio = this.calculateContrastRatio(adjustedColor, bgColor);
                iterations++;
            }

            return adjustedColor;
        },

        colorToHex(color) {
            const toHex = (n) => {
                const hex = Math.round(Math.max(0, Math.min(255, n))).toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            };

            return `#${toHex(color.r)}${toHex(color.g)}${toHex(color.b)}`;
        },

        createFixableIssue(type, severity, elements, currentValues, suggestedFix, reasoning) {
            const fixes = elements.map(element => ({
                selector: this.generateSelector(element),
                tagName: element.tagName.toLowerCase(),
                className: element.className || null,
                id: element.id || null,
                textPreview: element.textContent?.trim().substring(0, 30) || '(empty)',
                currentValues: currentValues,
                suggestedFix: suggestedFix,
                elementPath: this.getElementPath(element),
                wcagLevel: this.getWCAGLevel(type),
                impact: this.getAccessibilityImpact(type)
            }));

            this.state.fixableIssues.push({
                issueType: type,
                severity: severity,
                category: this.getAccessibilityCategory(type),
                description: reasoning,
                affectedElements: fixes.length,
                fixes: fixes,
                wcagCriteria: this.getWCAGCriteria(type),
                automationPossible: this.canAutomate(type)
            });
        },

        getWCAGLevel(type) {
            const levels = {
                'contrast-aa': 'AA',
                'contrast-aaa': 'AAA',
                'focus-accessibility': 'AA',
                'missing-accessible-name': 'A',
                'missing-required-state': 'A',
                'touch-target-size': 'AAA',
                'readability-issues': 'AAA'
            };
            return levels[type] || 'AA';
        },

        getAccessibilityImpact(type) {
            const impacts = {
                'contrast-aa': '–í—ã—Å–æ–∫–∏–π - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –∑—Ä–µ–Ω–∏—è',
                'contrast-aaa': '–°—Ä–µ–¥–Ω–∏–π - —É–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å',
                'focus-accessibility': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                'missing-accessible-name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä—ã',
                'missing-required-state': '–í—ã—Å–æ–∫–∏–π - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                'touch-target-size': '–°—Ä–µ–¥–Ω–∏–π - –º–æ–±–∏–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                'readability-issues': '–°—Ä–µ–¥–Ω–∏–π - –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
            };
            return impacts[type] || '–°—Ä–µ–¥–Ω–∏–π';
        },

        getAccessibilityCategory(type) {
            const categories = {
                'contrast-aa': 'visual',
                'contrast-aaa': 'visual',
                'focus-accessibility': 'keyboard',
                'missing-accessible-name': 'semantic',
                'missing-required-state': 'semantic',
                'touch-target-size': 'motor',
                'readability-issues': 'cognitive'
            };
            return categories[type] || 'other';
        },

        getWCAGCriteria(type) {
            const criteria = {
                'contrast-aa': '1.4.3 Contrast (Minimum)',
                'contrast-aaa': '1.4.6 Contrast (Enhanced)',
                'focus-accessibility': '2.4.7 Focus Visible',
                'missing-accessible-name': '4.1.2 Name, Role, Value',
                'missing-required-state': '4.1.2 Name, Role, Value',
                'touch-target-size': '2.5.5 Target Size',
                'readability-issues': '3.1.5 Reading Level'
            };
            return criteria[type] || 'General';
        },

        canAutomate(type) {
            const automatable = [
                'contrast-aa', 'contrast-aaa', 'missing-accessible-name',
                'touch-target-size', 'focus-accessibility'
            ];
            return automatable.includes(type);
        },

        generateSelector(element) {
            if (element.id) {
                return `#${element.id}`;
            }

            let selector = element.tagName.toLowerCase();

            if (element.className && typeof element.className === 'string') {
                const classes = element.className.trim().split(/\s+/);
                if (classes.length > 0 && classes[0] !== '') {
                    selector += '.' + classes.join('.');
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º nth-child –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —É–Ω–∏–∫–∞–ª–µ–Ω
            const similarElements = document.querySelectorAll(selector);
            if (similarElements.length > 1) {
                const parent = element.parentElement;
                if (parent) {
                    const siblings = Array.from(parent.children).filter(child =>
                        child.tagName === element.tagName && child.className === element.className
                    );
                    if (siblings.length > 1) {
                        const index = siblings.indexOf(element) + 1;
                        selector += `:nth-child(${index})`;
                    }
                }
            }

            return selector;
        },

        getElementPath(element) {
            const path = [];
            let current = element;

            while (current && current !== document.body && current !== document.documentElement) {
                let selector = current.tagName.toLowerCase();
                if (current.id) {
                    selector += `#${current.id}`;
                    path.unshift(selector);
                    break;
                }
                if (current.className && typeof current.className === 'string') {
                    const classes = current.className.trim().split(/\s+/);
                    if (classes.length > 0 && classes[0] !== '') {
                        selector += '.' + classes[0];
                    }
                }
                path.unshift(selector);
                current = current.parentElement;
            }

            return path.join(' > ');
        },

        // === –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê ===
        createAccessibilityInterface() {
            const container = document.createElement('div');
            container.id = 'accessibility-analyzer-results';
            container.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        width: 650px;
        max-height: 80vh;
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        border: 2px solid #0f3460;
        border-radius: 16px;
        color: #fff;
        font-family: 'SF Mono', Consolas, 'Liberation Mono', monospace;
        font-size: 12px;
        z-index: 10000;
        overflow: hidden;
        box-shadow: 0 16px 48px rgba(0,0,0,0.5);
        backdrop-filter: blur(20px);
      `;

            // Header with WCAG level selector
            const header = this.createHeader();

            // Stats dashboard
            const stats = this.createStatsDashboard();

            // Filter tabs
            const filterTabs = this.createFilterTabs();

            // Issues container
            const issuesContainer = document.createElement('div');
            issuesContainer.id = 'a11y-issues-container';
            issuesContainer.style.cssText = 'padding: 12px; max-height: 450px; overflow-y: auto;';

            // Controls
            const controls = this.createControls();

            // Assembly
            container.appendChild(header);
            container.appendChild(stats);
            container.appendChild(filterTabs);
            container.appendChild(issuesContainer);
            container.appendChild(controls);

            this.setupEventListeners(container);
            this.renderIssues(issuesContainer, 'all');

            document.body.appendChild(container);
            console.log('Accessibility interface added to DOM');
        },

        createHeader() {
            const header = document.createElement('div');
            header.style.cssText = `
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 14px 14px 0 0;
      `;

            header.innerHTML = `
        <div>
          <div style="font-weight: bold; font-size: 16px;">‚ôø Accessibility Analyzer</div>
          <div style="font-size: 11px; opacity: 0.9; margin-top: 2px;">WCAG 2.1 Compliance Check</div>
        </div>
        <div style="display: flex; align-items: center; gap: 12px;">
          <select id="wcag-level-selector" style="background:#5a67d8;border:none;color:#fff;padding:6px 12px;border-radius:6px;font-size:11px;">
            <option value="AA">WCAG AA</option>
            <option value="AAA">WCAG AAA</option>
          </select>
          <button id="close-a11y-analyzer" style="background:none;border:none;color:#fff;font-size:18px;cursor:pointer;opacity:0.8;">‚úï</button>
        </div>
      `;

            return header;
        },

        createStatsDashboard() {
            const stats = document.createElement('div');
            stats.style.cssText = 'padding: 16px 20px; background: #2a2a3e; border-bottom: 1px solid #444;';

            const totalIssues = this.state.fixableIssues.length;
            const criticalCount = this.state.fixableIssues.filter(i => i.severity === 'critical').length;
            const warningCount = this.state.fixableIssues.filter(i => i.severity === 'warning').length;
            const infoCount = this.state.fixableIssues.filter(i => i.severity === 'info').length;

            const categoryStats = this.getAccessibilityCategoryStats();

            stats.innerHTML = `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 12px; margin-bottom: 12px;">
          <div style="text-align: center; padding: 8px; background: rgba(255,75,87,0.1); border-radius: 6px; border: 1px solid rgba(255,75,87,0.2);">
<div style="font-size: 20px; font-weight: bold; color: #ff4757;">${criticalCount}</div>
            <div style="font-size: 10px; color: #ff4757;">üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö</div>
          </div>
          <div style="text-align: center; padding: 8px; background: rgba(255,165,2,0.1); border-radius: 6px; border: 1px solid rgba(255,165,2,0.2);">
            <div style="font-size: 20px; font-weight: bold; color: #ffa502;">${warningCount}</div>
            <div style="font-size: 10px; color: #ffa502;">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</div>
          </div>
          <div style="text-align: center; padding: 8px; background: rgba(58,123,213,0.1); border-radius: 6px; border: 1px solid rgba(58,123,213,0.2);">
            <div style="font-size: 20px; font-weight: bold; color: #3a7bd5;">${infoCount}</div>
            <div style="font-size: 10px; color: #3a7bd5;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</div>
          </div>
          <div style="text-align: center; padding: 8px; background: rgba(0,210,255,0.1); border-radius: 6px; border: 1px solid rgba(0,210,255,0.2);">
            <div style="font-size: 20px; font-weight: bold; color: #00d2ff;">${totalIssues}</div>
            <div style="font-size: 10px; color: #00d2ff;">üìä –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º</div>
          </div>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 8px; font-size: 11px;">
          <div>üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–µ: ${categoryStats.visual || 0}</div>
          <div>‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: ${categoryStats.keyboard || 0}</div>
          <div>üè∑Ô∏è –°–µ–º–∞–Ω—Ç–∏–∫–∞: ${categoryStats.semantic || 0}</div>
          <div>ü§≤ –ú–æ—Ç–æ—Ä–∏–∫–∞: ${categoryStats.motor || 0}</div>
          <div>üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ: ${categoryStats.cognitive || 0}</div>
        </div>
      `;

            return stats;
        },

        getAccessibilityCategoryStats() {
            const stats = {
                visual: 0,
                keyboard: 0,
                semantic: 0,
                motor: 0,
                cognitive: 0,
                other: 0
            };

            this.state.fixableIssues.forEach(issue => {
                const category = issue.category || 'other';
                stats[category] = (stats[category] || 0) + 1;
            });

            return stats;
        },

        createFilterTabs() {
            const filterTabs = document.createElement('div');
            filterTabs.style.cssText = `
    display: flex; 
    background: #333; 
    border-bottom: 1px solid #444;
    overflow-x: auto;
    gap: 2px;
  `;

            const filters = [{
                    name: 'all',
                    label: '–í—Å–µ',
                    icon: 'üìã',
                    color: '#667eea'
                },
                {
                    name: 'critical',
                    label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ',
                    icon: 'üö®',
                    color: '#ff4757'
                },
                {
                    name: 'visual',
                    label: '–í–∏–∑—É–∞–ª—å–Ω—ã–µ',
                    icon: 'üëÅÔ∏è',
                    color: '#5f27cd'
                },
                {
                    name: 'keyboard',
                    label: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
                    icon: '‚å®Ô∏è',
                    color: '#00d2ff'
                },
                {
                    name: 'semantic',
                    label: '–°–µ–º–∞–Ω—Ç–∏–∫–∞',
                    icon: 'üè∑Ô∏è',
                    color: '#10ac84'
                },
                {
                    name: 'wcag-aa',
                    label: 'WCAG AA',
                    icon: '‚úì',
                    color: '#ffa502'
                },
                {
                    name: 'wcag-aaa',
                    label: 'WCAG AAA',
                    icon: '‚úì‚úì',
                    color: '#ff6348'
                },
                {
                    name: 'export',
                    label: '–≠–∫—Å–ø–æ—Ä—Ç',
                    icon: 'üì§',
                    color: '#764ba2'
                } // –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
            ];

            filters.forEach((filter, index) => {
                console.log('Creating tab:', filter.name, filter.label);
                const tab = document.createElement('button');
                tab.style.cssText = `
      flex: 1;
      padding: 12px 8px;
      border: none;
      background: transparent;
      color: #ccc;
      cursor: pointer;
      font-size: 11px;
      border-bottom: 3px solid transparent;
      transition: all 0.3s ease;
      white-space: nowrap;
      min-width: 80px;
    `;

                tab.innerHTML = `
      <div>${filter.icon}</div>
      <div style="margin-top: 2px;">${filter.label}</div>
    `;
                tab.dataset.filter = filter.name;
                tab.dataset.color = filter.color;

                if (filter.name === 'all') {
                    tab.style.color = '#fff';
                    tab.style.borderBottomColor = filter.color;
                    tab.style.background = `linear-gradient(180deg, transparent 0%, ${filter.color}15 100%)`;
                }

                tab.addEventListener('click', (event) => {
                    console.log('Tab clicked:', filter.name);
                    if (filter.name === 'export') {
                        console.log('Showing export tab');
                        this.showExportTab();
                    } else {
                        console.log('Filtering issues:', filter.name);
                        this.filterAccessibilityIssues(filter.name, tab);
                    }
                });
                filterTabs.appendChild(tab);
            });

            console.log('All tabs created, total:', filterTabs.children.length);
            return filterTabs;
        },

        // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        showExportTab() {
            console.log('showExportTab called');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.querySelectorAll('[data-filter]').forEach(tab => {
                tab.style.color = '#ccc';
                tab.style.borderBottomColor = 'transparent';
                tab.style.background = 'transparent';
            });

            const exportTab = document.querySelector('[data-filter="export"]');
            console.log('Export tab found:', exportTab);
            
            if (exportTab) {
                const color = exportTab.dataset.color;
                exportTab.style.color = '#fff';
                exportTab.style.borderBottomColor = color;
                exportTab.style.background = `linear-gradient(180deg, transparent 0%, ${color}15 100%)`;
            }

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–Ω–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞
            const container = document.getElementById('a11y-issues-container');
            console.log('Container found:', container);
            
            if (container) {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                container.style.maxHeight = '85vh';
                container.style.height = 'auto';
                container.style.minHeight = '600px';
                
                // –¢–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                const mainContainer = document.getElementById('accessibility-analyzer-results');
                if (mainContainer) {
                    mainContainer.style.maxHeight = '95vh';
                    mainContainer.style.minHeight = '700px';
                }
                
                this.renderExportPanel(container);
            } else {
                console.error('Container a11y-issues-container not found');
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –¥—Ä—É–≥–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                const altContainer = document.querySelector('#accessibility-analyzer-results .a11y-issues-container') || 
                                   document.querySelector('#accessibility-analyzer-results > div:nth-child(4)');
                console.log('Alternative container found:', altContainer);
                if (altContainer) {
                    altContainer.style.maxHeight = '80vh';
                    altContainer.style.height = 'auto';
                    this.renderExportPanel(altContainer);
                }
            }
        },
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        renderExportPanel(container) {
            console.log('renderExportPanel called with container:', container);
            container.innerHTML = '';

            const exportPanel = document.createElement('div');
            exportPanel.style.cssText = `
    padding: 30px;
    background: linear-gradient(135deg, #2a2a3e 0%, #3a3a4e 100%);
    border-radius: 12px;
    margin: 15px;
    min-height: 500px;
  `;

            const stats = this.getExportStats();

            exportPanel.innerHTML = `
    <div style="text-align: center; margin-bottom: 24px;">
      <h3 style="color: #764ba2; margin: 0 0 8px 0; font-size: 18px;">üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
      <p style="color: #ccc; margin: 0; font-size: 12px;">
        –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–∏–º —Ä–∞–±–æ—á–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
      </p>
    </div>

    <!-- –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç -->
    <div style="margin-bottom: 32px;">
      <h4 style="color: #fff; margin: 0 0 16px 0; font-size: 16px; display: flex; align-items: center;">
        <span style="margin-right: 10px;">‚ö°</span>
        –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç
      </h4>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 16px;">
        ${this.createExportButton('copy-all-quick', 'üìã –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã', `${stats.total} –ø—Ä–æ–±–ª–µ–º`, '#00cc66', '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º')}
        ${this.createExportButton('copy-critical-quick', 'üö® –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ', `${stats.critical} –ø—Ä–æ–±–ª–µ–º`, '#ff4757', '–ü—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')}
        ${this.createExportButton('copy-automated-quick', 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã–µ', `${stats.automated} –ø—Ä–æ–±–ª–µ–º`, '#764ba2', '–ü—Ä–æ–±–ª–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')}
      </div>
    </div>

    <!-- –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º -->
    <div style="margin-bottom: 32px;">
      <h4 style="color: #fff; margin: 0 0 16px 0; font-size: 16px; display: flex; align-items: center;">
        <span style="margin-right: 10px;">üéØ</span>
        –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      </h4>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 14px;">
        ${this.createExportButton('copy-visual', 'üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–µ', `${stats.visual} –ø—Ä–æ–±–ª–µ–º`, '#5f27cd', '–ö–æ–Ω—Ç—Ä–∞—Å—Ç, —Ü–≤–µ—Ç–∞, –≤–∏–¥–∏–º–æ—Å—Ç—å')}
        ${this.createExportButton('copy-keyboard', '‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞', `${stats.keyboard} –ø—Ä–æ–±–ª–µ–º`, '#00d2ff', '–ù–∞–≤–∏–≥–∞—Ü–∏—è, —Ñ–æ–∫—É—Å, —Ç–∞–±—É–ª—è—Ü–∏—è')}
        ${this.createExportButton('copy-semantic', 'üè∑Ô∏è –°–µ–º–∞–Ω—Ç–∏–∫–∞', `${stats.semantic} –ø—Ä–æ–±–ª–µ–º`, '#10ac84', 'ARIA, —Ä–æ–ª–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞')}
        ${this.createExportButton('copy-motor', 'ü§≤ –ú–æ—Ç–æ—Ä–∏–∫–∞', `${stats.motor} –ø—Ä–æ–±–ª–µ–º`, '#ff6348', '–†–∞–∑–º–µ—Ä—ã –∫–∞—Å–∞–Ω–∏—è, —Ç–∞–π–º–∞—É—Ç—ã')}
        ${this.createExportButton('copy-cognitive', 'üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ', `${stats.cognitive} –ø—Ä–æ–±–ª–µ–º`, '#f39c12', '–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å, –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å')}
      </div>
    </div>

    <!-- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã -->
    <div style="margin-bottom: 32px;">
      <h4 style="color: #fff; margin: 0 0 16px 0; font-size: 16px; display: flex; align-items: center;">
        <span style="margin-right: 10px;">üìä</span>
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
      </h4>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 16px;">
        ${this.createExportButton('copy-wcag-report', 'üèÜ WCAG Compliance', '–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç', '#e67e22', '–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ WCAG 2.1')}
        ${this.createExportButton('copy-developer-guide', 'üë®‚Äçüíª –ì–∏–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', '–° –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞', '#9b59b6', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å –∫–æ–¥–æ–º')}
        ${this.createExportButton('copy-testing-plan', 'üß™ –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', '–ß–µ–∫-–ª–∏—Å—Ç', '#3498db', '–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏')}
        ${this.createExportButton('copy-executive-summary', 'üìà Executive Summary', '–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', '#e74c3c', '–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞')}
      </div>
    </div>

    <!-- –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ -->
    <div style="margin-bottom: 32px;">
      <h4 style="color: #fff; margin: 0 0 16px 0; font-size: 16px; display: flex; align-items: center;">
        <span style="margin-right: 10px;">üîß</span>
        –ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
      </h4>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 16px;">
        ${this.createExportButton('copy-css-fixes', 'üé® CSS –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ì–æ—Ç–æ–≤—ã–π –∫–æ–¥', '#2ecc71', 'CSS –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º')}
        ${this.createExportButton('copy-html-improvements', 'üìù HTML —É–ª—É—á—à–µ–Ω–∏—è', '–†–∞–∑–º–µ—Ç–∫–∞', '#f39c12', '–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π HTML —Ä–∞–∑–º–µ—Ç–∫–∏')}
        ${this.createExportButton('copy-js-enhancements', '‚ö° JS —É–ª—É—á—à–µ–Ω–∏—è', '–°–∫—Ä–∏–ø—Ç—ã', '#9b59b6', 'JavaScript –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π')}
        ${this.createExportButton('copy-json-data', 'üìÑ JSON –¥–∞–Ω–Ω—ã–µ', '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '#34495e', '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏')}
      </div>
    </div>

    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
    <div style="background: rgba(255,255,255,0.05); padding: 24px; border-radius: 10px; border-left: 4px solid #764ba2;">
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 20px; font-size: 13px;">
        <div style="text-align: center;">
          <div style="font-size: 20px; font-weight: bold; color: #ff4757;">${stats.critical}</div>
          <div style="color: #ccc;">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö</div>
        </div>
        <div style="text-align: center;">
          <div style="font-size: 20px; font-weight: bold; color: #ffa502;">${stats.warning}</div>
          <div style="color: #ccc;">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</div>
        </div>
        <div style="text-align: center;">
          <div style="font-size: 20px; font-weight: bold; color: #3742fa;">${stats.info}</div>
          <div style="color: #ccc;">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</div>
        </div>
        <div style="text-align: center;">
          <div style="font-size: 20px; font-weight: bold; color: #764ba2;">${stats.automated}</div>
          <div style="color: #ccc;">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã—Ö</div>
        </div>
        <div style="text-align: center;">
          <div style="font-size: 20px; font-weight: bold; color: #00d2ff;">${this.calculateWCAGScore()}%</div>
          <div style="color: #ccc;">WCAG Score</div>
        </div>
      </div>
    </div>
  `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupExportEventListeners(exportPanel);

            container.appendChild(exportPanel);
            console.log('Export panel added to container');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            container.style.display = 'block';
            exportPanel.style.display = 'block';
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container.scrollTop = 0;
        },
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        createExportButton(id, title, subtitle, color, description) {
            return `
    <button id="${id}" 
            data-description="${description}"
            style="
              background: linear-gradient(135deg, ${color}20 0%, ${color}10 100%);
              border: 2px solid ${color}40;
              color: #fff;
              padding: 20px;
              border-radius: 10px;
              cursor: pointer;
              font-family: inherit;
              font-size: 12px;
              transition: all 0.3s ease;
              text-align: left;
              position: relative;
              overflow: hidden;
              min-height: 80px;
              display: flex;
              flex-direction: column;
              justify-content: center;
            ">
      <div style="font-weight: bold; margin-bottom: 6px; color: ${color}; font-size: 13px;">${title}</div>
      <div style="color: #ccc; font-size: 11px;">${subtitle}</div>
      <div style="position: absolute; top: 12px; right: 12px; font-size: 18px; opacity: 0.7;">üì§</div>
    </button>
  `;
        },
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        getExportStats() {
            const issues = this.state.fixableIssues;

            return {
                total: issues.length,
                critical: issues.filter(i => i.severity === 'critical').length,
                warning: issues.filter(i => i.severity === 'warning').length,
                info: issues.filter(i => i.severity === 'info').length,
                automated: issues.filter(i => i.automationPossible).length,
                visual: issues.filter(i => i.category === 'visual').length,
                keyboard: issues.filter(i => i.category === 'keyboard').length,
                semantic: issues.filter(i => i.category === 'semantic').length,
                motor: issues.filter(i => i.category === 'motor').length,
                cognitive: issues.filter(i => i.category === 'cognitive').length
            };
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        setupExportEventListeners(panel) {
            // Hover effects –¥–ª—è –∫–Ω–æ–ø–æ–∫
            const buttons = panel.querySelectorAll('button[id^="copy-"]');
            buttons.forEach(button => {
                button.addEventListener('mouseenter', (e) => {
                    const description = e.target.dataset.description;
                    this.showExportTooltip(e.target, description);

                    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
                    e.target.style.transform = 'translateY(-2px) scale(1.02)';
                    e.target.style.boxShadow = '0 8px 25px rgba(0,0,0,0.3)';
                });

                button.addEventListener('mouseleave', (e) => {
                    this.hideExportTooltip();
                    e.target.style.transform = 'translateY(0) scale(1)';
                    e.target.style.boxShadow = 'none';
                });
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
            const clickHandlers = {
                'copy-all-quick': () => this.copyAccessibilityFixes('all'),
                'copy-critical-quick': () => this.copyAccessibilityFixes('critical'),
                'copy-automated-quick': () => this.copyAccessibilityFixes('automated'),
                'copy-visual': () => this.copyByCategory('visual'),
                'copy-keyboard': () => this.copyByCategory('keyboard'),
                'copy-semantic': () => this.copyByCategory('semantic'),
                'copy-motor': () => this.copyByCategory('motor'),
                'copy-cognitive': () => this.copyByCategory('cognitive'),
                'copy-wcag-report': () => this.copyWCAGReport(),
                'copy-developer-guide': () => this.copyDeveloperGuide(),
                'copy-testing-plan': () => this.copyTestingPlan(),
                'copy-executive-summary': () => this.copyExecutiveSummary(),
                'copy-css-fixes': () => this.copyCSSFixes(),
                'copy-html-improvements': () => this.copyHTMLImprovements(),
                'copy-js-enhancements': () => this.copyJSEnhancements(),
                'copy-json-data': () => this.copyJSONData()
            };

            Object.entries(clickHandlers).forEach(([id, handler]) => {
                const button = panel.querySelector(`#${id}`);
                if (button) {
                    button.addEventListener('click', (e) => {
                        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞
                        e.target.style.transform = 'scale(0.95)';
                        setTimeout(() => {
                            e.target.style.transform = 'translateY(-2px) scale(1.02)';
                        }, 150);

                        handler();
                    });
                }
            });
        },
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        showExportTooltip(element, description) {
            const tooltip = document.createElement('div');
            tooltip.id = 'export-tooltip';
            tooltip.style.cssText = `
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.95);
    color: white;
    padding: 8px 12px;
    font-size: 11px;
    border-radius: 6px;
    white-space: nowrap;
    z-index: 10001;
    opacity: 0;
    transition: opacity 0.3s ease;
    max-width: 250px;
    white-space: normal;
    text-align: center;
    margin-bottom: 8px;
    border: 1px solid #764ba2;
  `;

            tooltip.textContent = description;
            element.style.position = 'relative';
            element.appendChild(tooltip);

            setTimeout(() => {
                tooltip.style.opacity = '1';
            }, 100);
        },

        // –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        hideExportTooltip() {
            const tooltip = document.getElementById('export-tooltip');
            if (tooltip) {
                tooltip.style.opacity = '0';
                setTimeout(() => {
                    if (tooltip.parentNode) {
                        tooltip.parentNode.removeChild(tooltip);
                    }
                }, 300);
            }
        },

        // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        async copyByCategory(category) {
            const filteredIssues = this.state.fixableIssues.filter(issue => issue.category === category);

            if (filteredIssues.length === 0) {
                this.showAccessibilityNotification(`‚ùå –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`, 'warning');
                return;
            }

            const categoryData = {
                title: `‚ôø Accessibility Issues - ${category.toUpperCase()} Category`,
                category: category,
                timestamp: new Date().toISOString(),
                url: window.location.href,
                issues: filteredIssues,
                summary: {
                    total: filteredIssues.length,
                    critical: filteredIssues.filter(i => i.severity === 'critical').length,
                    estimatedTime: this.calculateTotalFixTime(filteredIssues) + ' –º–∏–Ω—É—Ç'
                }
            };

            try {
                await navigator.clipboard.writeText(JSON.stringify(categoryData, null, 2));
                this.showAccessibilityNotification(`‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!`, 'success');
            } catch (err) {
                console.log(`${category.toUpperCase()} Category Issues:`, categoryData);
                this.showAccessibilityNotification(`üìã –î–∞–Ω–Ω—ã–µ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å`, 'info');
            }
        },

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        async copyDeveloperGuide() {
            const guide = {
                title: 'üë®‚Äçüíª Developer Accessibility Guide',
                timestamp: new Date().toISOString(),
                url: window.location.href,

                quickStart: {
                    description: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
                    steps: [
                        '1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
                        '2. –î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ aria-label',
                        '3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤',
                        '4. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–µ',
                        '5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π'
                    ]
                },

                codeExamples: this.generateAllCodeExamples(),
                testingChecklist: this.generateTestingChecklist(),
                resources: this.generateDeveloperResources(),
                issuesByPriority: this.state.fixableIssues
                    .sort((a, b) => this.getAccessibilityPriority(a) - this.getAccessibilityPriority(b))
                    .slice(0, 10)
            };

            try {
                await navigator.clipboard.writeText(JSON.stringify(guide, null, 2));
                this.showAccessibilityNotification('‚úÖ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!', 'success');
                console.log('üë®‚Äçüíª Developer Guide:', guide);
            } catch (err) {
                console.log('üë®‚Äçüíª Developer Guide:', guide);
                this.showAccessibilityNotification('üìã –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤—ã–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å', 'info');
            }
        },

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        async copyTestingPlan() {
            const plan = {
                title: 'üß™ Accessibility Testing Plan',
                timestamp: new Date().toISOString(),

                automatedTesting: {
                    tools: ['axe-core', 'Pa11y', 'Lighthouse', 'WAVE'],
                    schedule: '–ù–∞ –∫–∞–∂–¥—ã–π –∫–æ–º–º–∏—Ç –∏ –¥–µ–ø–ª–æ–π',
                    coverage: '–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ~40% –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ WCAG'
                },

                manualTesting: {
                    keyboardNavigation: [
                        'Tab —á–µ—Ä–µ–∑ –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
                        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞',
                        'Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω',
                        'Enter/Space –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫'
                    ],
                    screenReaderTesting: [
                        'NVDA (Windows) - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
                        'VoiceOver (macOS) - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π',
                        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                        '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º (H1-H6)'
                    ],
                    visualTesting: [
                        '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ 200%',
                        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –≤—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ',
                        '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ü–≤–µ—Ç–æ–≤',
                        '–ú–æ–±–∏–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
                    ]
                },

                userTesting: {
                    targetGroups: ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä–æ–≤', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', '–õ—é–¥–∏ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –∑—Ä–µ–Ω–∏—è'],
                    scenarios: this.generateUserTestingScenarios(),
                    frequency: '–†–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π'
                },

                currentIssues: this.state.fixableIssues.map(issue => ({
                    type: issue.issueType,
                    priority: issue.severity,
                    testMethod: this.getTestMethodForIssue(issue.issueType),
                    automation: issue.automationPossible
                }))
            };

            try {
                await navigator.clipboard.writeText(JSON.stringify(plan, null, 2));
                this.showAccessibilityNotification('‚úÖ –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
            } catch (err) {
                console.log('üß™ Testing Plan:', plan);
                this.showAccessibilityNotification('üìã –ü–ª–∞–Ω –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å', 'info');
            }
        },

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...
        generateAllCodeExamples() {
            const examples = {};
            const issueTypes = [...new Set(this.state.fixableIssues.map(i => i.issueType))];

            issueTypes.forEach(type => {
                const issue = this.state.fixableIssues.find(i => i.issueType === type);
                if (issue && issue.fixes.length > 0) {
                    examples[type] = this.generateCodeExample(issue.fixes[0], type);
                }
            });

            return examples;
        },

        generateTestingChecklist() {
            return [
                '‚òê –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç alt –∞—Ç—Ä–∏–±—É—Ç—ã',
                '‚òê –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã',
                '‚òê –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç WCAG AA',
                '‚òê –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ª–µ–¥—É—é—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏',
                '‚òê –§–æ—Ä–º—ã –∏–º–µ—é—Ç –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π',
                '‚òê –û—à–∏–±–∫–∏ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä–∞–º–∏',
                '‚òê –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ JavaScript',
                '‚òê –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ 200% –Ω–µ –ª–æ–º–∞–µ—Ç –ª–µ–π–∞—É—Ç'
            ];
        },

        generateDeveloperResources() {
            return {
                documentation: [
                    'MDN Web Accessibility: https://developer.mozilla.org/en-US/docs/Web/Accessibility',
                    'WCAG 2.1 Guidelines: https://www.w3.org/WAI/WCAG21/quickref/',
                    'ARIA Authoring Practices: https://www.w3.org/WAI/ARIA/apg/'
                ],
                tools: [
                    'axe DevTools browser extension',
                    'Colour Contrast Analyser',
                    'HeadingsMap browser extension',
                    'Web Developer browser extension'
                ],
                testing: [
                    'NVDA Screen Reader (free)',
                    'Pa11y command line tool',
                    'jest-axe for automated testing'
                ]
            };
        },
        createControls() {
            const controls = document.createElement('div');
            controls.style.cssText = 'padding: 16px 20px; background: #333; border-radius: 0 0 14px 14px;';

            const automationStats = this.getAutomationStats();

            controls.innerHTML = `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 8px; margin-bottom: 12px;">
          <button id="clear-a11y-highlights" style="background:#555;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:11px;">
            üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É
          </button>
          <button id="export-a11y-report" style="background:#667eea;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:11px;">
            üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
          </button>
          <button id="run-contrast-check" style="background:#5f27cd;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:11px;">
            üé® –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç
          </button>
          <button id="simulate-screen-reader" style="background:#10ac84;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:11px;">
            üîä –°–∏–º—É–ª—è—Ü–∏—è —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä–∞
          </button>
        </div>
        
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); gap: 8px; margin-bottom: 8px;">
          <button id="copy-all-a11y-fixes" style="background:#00cc66;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:10px;">
            üìã –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (${this.state.fixableIssues.length})
          </button>
          <button id="copy-critical-a11y-fixes" style="background:#ff4444;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:10px;">
            üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (${automationStats.critical})
          </button>
          <button id="copy-automated-fixes" style="background:#764ba2;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:10px;">
            ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã–µ (${automationStats.automated})
          </button>
          <button id="copy-wcag-report" style="background:#ffa502;border:none;color:#fff;padding:8px 12px;border-radius:6px;cursor:pointer;font-size:10px;">
            ‚úì WCAG –æ—Ç—á–µ—Ç
          </button>
        </div>
        
        <div style="font-size: 10px; color: #888; text-align: center;">
          üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ ‚Ä¢ Hover –¥–ª—è –¥–µ—Ç–∞–ª–µ–π WCAG
        </div>
      `;

            return controls;
        },

        getAutomationStats() {
            return {
                critical: this.state.fixableIssues.filter(i => i.severity === 'critical').length,
                automated: this.state.fixableIssues.filter(i => i.automationPossible).length
            };
        },

        renderIssues(container, filterType) {
            container.innerHTML = '';

            let filteredIssues = this.state.fixableIssues;

            switch (filterType) {
                case 'critical':
                    filteredIssues = this.state.fixableIssues.filter(i => i.severity === 'critical');
                    break;
                case 'visual':
                    filteredIssues = this.state.fixableIssues.filter(i => i.category === 'visual');
                    break;
                case 'keyboard':
                    filteredIssues = this.state.fixableIssues.filter(i => i.category === 'keyboard');
                    break;
                case 'semantic':
                    filteredIssues = this.state.fixableIssues.filter(i => i.category === 'semantic');
                    break;
                case 'wcag-aa':
                    filteredIssues = this.state.fixableIssues.filter(i => i.wcagLevel === 'AA' || i.wcagLevel === 'A');
                    break;
                case 'wcag-aaa':
                    filteredIssues = this.state.fixableIssues.filter(i => i.wcagLevel === 'AAA');
                    break;
            }

            if (filteredIssues.length === 0) {
                const emptyState = document.createElement('div');
                emptyState.style.cssText = `
          padding: 50px 20px;
          text-align: center;
          color: #666;
          font-size: 14px;
        `;

                const icons = {
                    'all': 'üéâ',
                    'critical': '‚úÖ',
                    'visual': 'üëÅÔ∏è‚ú®',
                    'keyboard': '‚å®Ô∏è‚úÖ',
                    'semantic': 'üè∑Ô∏è‚úì',
                    'wcag-aa': 'üèÜ',
                    'wcag-aaa': 'ü•á'
                };

                emptyState.innerHTML = `
          <div style="font-size: 64px; margin-bottom: 16px;">${icons[filterType] || 'üéâ'}</div>
          <div style="font-weight: bold; margin-bottom: 8px;">–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</div>
          <div style="font-size: 12px;">
            –ü—Ä–æ–±–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${filterType}" –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
          </div>
        `;
                container.appendChild(emptyState);
                return;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            filteredIssues.sort((a, b) => {
                const severityOrder = {
                    critical: 0,
                    warning: 1,
                    info: 2
                };
                return severityOrder[a.severity] - severityOrder[b.severity];
            });

            filteredIssues.forEach((issue, index) => {
                const issueElement = this.createIssueElement(issue, index);
                container.appendChild(issueElement);
            });
        },

        createIssueElement(issue, index) {
            const row = document.createElement('div');
            row.style.cssText = `
        padding: 16px;
        margin: 8px 0;
        border-left: 4px solid ${this.getSeverityColor(issue.severity)};
        background: linear-gradient(135deg, #2a2a3e 0%, #3a3a4e 100%);
        cursor: pointer;
        border-radius: 8px;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      `;

            // WCAG level indicator
            const wcagBadge = this.createWCAGBadge(issue);
            const categoryBadge = this.createCategoryBadge(issue);
            const severityBadge = this.createSeverityBadge(issue);

            row.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">
          <div style="flex: 1;">
            <div style="font-weight: bold; font-size: 13px; margin-bottom: 4px;">
              ${this.getIssueTitle(issue)}
            </div>
            <div style="display: flex; gap: 6px; margin-bottom: 8px;">
              ${wcagBadge}
              ${categoryBadge}
              ${severityBadge}
              ${issue.automationPossible ? '<span style="background:#10ac84;color:#fff;padding:2px 6px;border-radius:12px;font-size:9px;">ü§ñ AUTO</span>' : ''}
            </div>
          </div>
          <div style="text-align: right; color: #888; font-size: 11px;">
            <div>${issue.affectedElements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>
            <div>${this.getEstimatedFixTime(issue.issueType)}</div>
          </div>
        </div>
        
        <div style="color: #ccc; font-size: 12px; line-height: 1.4; margin-bottom: 10px;">
          ${issue.description}
        </div>
        
        ${this.createImpactInfo(issue)}
        
        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 12px; padding-top: 8px; border-top: 1px solid rgba(255,255,255,0.1);">
          <div style="color: #888; font-size: 10px;">
            üí° –ö–ª–∏–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ ‚Ä¢ ${issue.wcagCriteria}
          </div>
          <div style="font-size: 10px; color: #${this.getSeverityColor(issue.severity).slice(1)};">
            ${issue.impact}
          </div>
        </div>
      `;

            // Enhanced interactions with accessibility info
            row.addEventListener('click', () => {
                const elements = issue.fixes.map(fix => {
                    const element = document.querySelector(fix.selector);
                    return element;
                }).filter(Boolean);

                this.highlightAccessibilityElements(elements, issue);
            });

            row.addEventListener('mouseenter', () => {
                row.style.background = 'linear-gradient(135deg, #3a3a4e 0%, #4a4a5e 100%)';
                row.style.transform = 'translateY(-2px) scale(1.02)';
                row.style.boxShadow = `0 8px 25px ${this.getSeverityColor(issue.severity)}40`;
                this.showWCAGTooltip(row, issue);
            });

            row.addEventListener('mouseleave', () => {
                row.style.background = 'linear-gradient(135deg, #2a2a3e 0%, #3a3a4e 100%)';
                row.style.transform = 'translateY(0) scale(1)';
                row.style.boxShadow = 'none';
                this.hideWCAGTooltip();
            });

            return row;
        },

        createWCAGBadge(issue) {
            const colors = {
                'A': '#10ac84',
                'AA': '#ffa502',
                'AAA': '#ff4757'
            };

            return `<span style="background:${colors[issue.wcagLevel] || colors.AA};color:#fff;padding:2px 6px;border-radius:12px;font-size:9px;font-weight:bold;">WCAG ${issue.wcagLevel}</span>`;
        },

        createCategoryBadge(issue) {
            const categories = {
                'visual': {
                    icon: 'üëÅÔ∏è',
                    color: '#5f27cd',
                    label: 'Visual'
                },
                'keyboard': {
                    icon: '‚å®Ô∏è',
                    color: '#00d2ff',
                    label: 'Keyboard'
                },
                'semantic': {
                    icon: 'üè∑Ô∏è',
                    color: '#10ac84',
                    label: 'Semantic'
                },
                'motor': {
                    icon: 'ü§≤',
                    color: '#ff6348',
                    label: 'Motor'
                },
                'cognitive': {
                    icon: 'üß†',
                    color: '#764ba2',
                    label: 'Cognitive'
                }
            };

            const cat = categories[issue.category] || {
                icon: '‚ùì',
                color: '#666',
                label: 'Other'
            };

            return `<span style="background:${cat.color};color:#fff;padding:2px 6px;border-radius:12px;font-size:9px;">${cat.icon} ${cat.label}</span>`;
        },

        createSeverityBadge(issue) {
            const severities = {
                'critical': {
                    label: '–ö–†–ò–¢–ò–ß–ù–û',
                    color: '#ff4757'
                },
                'warning': {
                    label: '–í–ù–ò–ú–ê–ù–ò–ï',
                    color: '#ffa502'
                },
                'info': {
                    label: '–ò–ù–§–û',
                    color: '#3742fa'
                }
            };

            const sev = severities[issue.severity];
            return `<span style="background:${sev.color};color:#fff;padding:2px 6px;border-radius:12px;font-size:9px;font-weight:bold;">${sev.label}</span>`;
        },

        getIssueTitle(issue) {
            const titles = {
                'contrast-aa': 'üé® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (WCAG AA)',
                'contrast-aaa': 'üé® –ö–æ–Ω—Ç—Ä–∞—Å—Ç –Ω–∏–∂–µ AAA —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞',
                'focus-accessibility': 'üéØ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–æ–π',
                'missing-accessible-name': 'üè∑Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–º—è',
                'missing-required-state': 'üîÑ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                'touch-target-size': 'üëÜ –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞—Å–∞–Ω–∏—è',
                'readability-issues': 'üìñ –ü—Ä–æ–±–ª–µ–º—ã —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏',
                'invalid-role': '‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è ARIA —Ä–æ–ª—å',
                'aria-conflict': '‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤'
            };

            return titles[issue.issueType] || `‚ùì ${issue.issueType}`;
        },

        createImpactInfo(issue) {
            return `
        <div style="background: rgba(255,255,255,0.05); padding: 10px; border-radius: 6px; margin: 8px 0;">
          <div style="font-size: 11px; color: #ddd; display: flex; justify-content: space-between;">
            <div>
              <strong>–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ:</strong> ${issue.impact}
            </div>
            <div>
              <strong>WCAG:</strong> ${issue.wcagCriteria}
            </div>
          </div>
        </div>
      `;
        },

        showWCAGTooltip(element, issue) {
            const tooltip = document.createElement('div');
            tooltip.id = 'wcag-tooltip';
            tooltip.style.cssText = `
        position: absolute;
        top: -120px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.95);
        color: white;
        padding: 12px 16px;
        font-size: 11px;
        border-radius: 8px;
        white-space: nowrap;
        z-index: 10001;
        opacity: 0;
        transition: opacity 0.3s ease;
        border: 1px solid ${this.getSeverityColor(issue.severity)};
        max-width: 300px;
        white-space: normal;
        line-height: 1.4;
      `;

            tooltip.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 6px;">${issue.wcagCriteria}</div>
        <div style="margin-bottom: 4px;">${issue.impact}</div>
        <div style="color: #ccc; font-size: 10px;">
          –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${issue.affectedElements} ‚Ä¢ 
          ${issue.automationPossible ? '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º–æ' : '–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'}
        </div>
      `;

            element.appendChild(tooltip);

            setTimeout(() => {
                tooltip.style.opacity = '1';
            }, 10);
        },

        hideWCAGTooltip() {
            const tooltip = document.getElementById('wcag-tooltip');
            if (tooltip) {
                tooltip.style.opacity = '0';
                setTimeout(() => {
                    if (tooltip.parentNode) {
                        tooltip.parentNode.removeChild(tooltip);
                    }
                }, 300);
            }
        },

        highlightAccessibilityElements(elements, issue) {
            this.clearHighlights();

            if (elements.length === 0) {
                this.showAccessibilityNotification('üîç –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–∫—Ä—ã—Ç—ã', 'warning');
                return;
            }

            elements.forEach((element, index) => {
                if (!element) return;

                const overlay = document.createElement('div');
                overlay.className = 'a11y-highlight';

                const color = this.getSeverityColor(issue.severity);

                overlay.style.cssText = `
          position: absolute;
          pointer-events: none;
          background: ${color}25;
          border: 3px solid ${color};
          border-radius: 8px;
          z-index: 9999;
          transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
          animation: a11yPulse 3s infinite;
          box-shadow: 0 0 20px ${color}40;
        `;

                const rect = element.getBoundingClientRect();
                overlay.style.top = (rect.top + window.scrollY - 4) + 'px';
                overlay.style.left = (rect.left + window.scrollX - 4) + 'px';
                overlay.style.width = (rect.width + 8) + 'px';
                overlay.style.height = (rect.height + 8) + 'px';

                // Enhanced label with issue info
                const label = document.createElement('div');
                label.style.cssText = `
          position: absolute;
          top: -40px;
          left: -4px;
          background: linear-gradient(135deg, ${color} 0%, ${color}dd 100%);
          color: white;
          padding: 6px 10px;
          font-size: 11px;
          border-radius: 8px;
          font-weight: bold;
          white-space: nowrap;
          box-shadow: 0 4px 12px rgba(0,0,0,0.3);
          z-index: 10000;
          max-width: 200px;
          white-space: normal;
          line-height: 1.3;
        `;

                const tagName = element.tagName.toLowerCase();
                const issueTypeShort = issue.issueType.split('-')[0];
                label.innerHTML = `
          <div>${index + 1}. ${tagName} - ${issueTypeShort}</div>
          <div style="font-size: 9px; opacity: 0.9; margin-top: 2px;">WCAG ${issue.wcagLevel} ‚Ä¢ ${issue.category}</div>
        `;
                overlay.appendChild(label);

                // Add detailed info panel
                const infoPanel = document.createElement('div');
                infoPanel.style.cssText = `
          position: absolute;
          top: -100px;
          right: -4px;
          background: rgba(0, 0, 0, 0.9);
          color: white;
          padding: 8px 12px;
          font-size: 10px;
          border-radius: 6px;
          opacity: 0;
          transition: opacity 0.3s ease;
          pointer-events: none;
          max-width: 250px;
          border: 1px solid ${color};
        `;

                // Show issue-specific info
                let infoContent = '';
                if (issue.issueType.includes('contrast')) {
                    const fix = issue.fixes.find(f => f.selector === this.generateSelector(element));
                    if (fix) {
                        infoContent = `
              <div><strong>–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç:</strong> ${fix.currentValues['current-ratio']}:1</div>
              <div><strong>–¢—Ä–µ–±—É–µ—Ç—Å—è:</strong> ${fix.currentValues['required-ratio']}:1</div>
            `;
                    }
                } else if (issue.issueType.includes('touch-target')) {
                    const fix = issue.fixes.find(f => f.selector === this.generateSelector(element));
                    if (fix) {
                        infoContent = `
              <div><strong>–†–∞–∑–º–µ—Ä:</strong> ${fix.currentValues.width} √ó ${fix.currentValues.height}</div>
              <div><strong>–ú–∏–Ω–∏–º—É–º:</strong> 44√ó44px</div>
            `;
                    }
                } else {
                    infoContent = `<div>${issue.description}</div>`;
                }

                infoPanel.innerHTML = infoContent;
                overlay.appendChild(infoPanel);

                // Show info panel on hover
                overlay.addEventListener('mouseenter', () => {
                    infoPanel.style.opacity = '1';
                });

                overlay.addEventListener('mouseleave', () => {
                    infoPanel.style.opacity = '0';
                });

                document.body.appendChild(overlay);
                this.state.highlightedElements.add(overlay);

                // Staggered animation
                setTimeout(() => {
                    overlay.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        overlay.style.transform = 'scale(1)';
                    }, 300);
                }, index * 150);
            });

            // Add pulse animation styles if not present
            if (!document.getElementById('a11y-pulse-styles')) {
                const style = document.createElement('style');
                style.id = 'a11y-pulse-styles';
                style.textContent = `
          @keyframes a11yPulse {
            0% { box-shadow: 0 0 20px ${this.getSeverityColor(issue.severity)}40; }
            50% { box-shadow: 0 0 30px ${this.getSeverityColor(issue.severity)}60; }
            100% { box-shadow: 0 0 20px ${this.getSeverityColor(issue.severity)}40; }
          }
        `;
                document.head.appendChild(style);
            }

            // Scroll to first element
            if (elements.length > 0 && elements[0]) {
                elements[0].scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',
                    inline: 'center'
                });
            }

            this.showAccessibilityNotification(`üéØ –ü–æ–¥—Å–≤–µ—á–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–æ–π "${issue.issueType}"`, 'info');
        },

        // === EVENT HANDLERS ===
        setupEventListeners(container) {
            // Close button
            container.querySelector('#close-a11y-analyzer').addEventListener('click', () => {
                this.cleanup();
            });

            // WCAG level selector
            container.querySelector('#wcag-level-selector').addEventListener('change', (e) => {
                this.state.wcagLevel = e.target.value;
                this.showAccessibilityNotification(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ WCAG ${e.target.value} —É—Ä–æ–≤–µ–Ω—å`, 'info');
                // Re-run analysis with new level
                this.reanalyzeWithLevel(e.target.value);
            });

            // Clear highlights
            container.querySelector('#clear-a11y-highlights').addEventListener('click', () => {
                this.clearHighlights();
            });

            // Export report
            container.querySelector('#export-a11y-report').addEventListener('click', () => {
                this.exportAccessibilityReport();
            });

            // Re-run contrast check
            container.querySelector('#run-contrast-check').addEventListener('click', () => {
                this.rerunContrastCheck();
            });

            // Screen reader simulation
            container.querySelector('#simulate-screen-reader').addEventListener('click', () => {
                this.simulateScreenReader();
            });

            // Copy buttons
            container.querySelector('#copy-all-a11y-fixes').addEventListener('click', () => {
                this.copyAccessibilityFixes('all');
            });

            container.querySelector('#copy-critical-a11y-fixes').addEventListener('click', () => {
                this.copyAccessibilityFixes('critical');
            });

            container.querySelector('#copy-automated-fixes').addEventListener('click', () => {
                this.copyAccessibilityFixes('automated');
            });

            container.querySelector('#copy-wcag-report').addEventListener('click', () => {
                this.copyWCAGReport();
            });
        },

        filterAccessibilityIssues(filterType, activeTab) {
            // Update active tab
            document.querySelectorAll('[data-filter]').forEach(tab => {
                tab.style.color = '#ccc';
                tab.style.borderBottomColor = 'transparent';
                tab.style.background = 'transparent';
            });

            const color = activeTab.dataset.color;
            activeTab.style.color = '#fff';
            activeTab.style.borderBottomColor = color;
            activeTab.style.background = `linear-gradient(180deg, transparent 0%, ${color}15 100%)`;

            // Re-render issues
            const container = document.getElementById('a11y-issues-container');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
            if (filterType !== 'export') {
                container.style.maxHeight = '450px';
                container.style.height = 'auto';
            }
            
            this.renderIssues(container, filterType);
        },

        // === ADVANCED FEATURES ===
        async copyAccessibilityFixes(filterType) {
            let filteredIssues;
            let title;

            switch (filterType) {
                case 'critical':
                    filteredIssues = this.state.fixableIssues.filter(issue => issue.severity === 'critical');
                    title = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò';
                    break;
                case 'automated':
                    filteredIssues = this.state.fixableIssues.filter(issue => issue.automationPossible);
                    title = '–ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–£–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–°–¢–£–ü–ù–û–°–¢–ò';
                    break;
                default:
                    filteredIssues = this.state.fixableIssues;
                    title = '–í–°–ï –ü–†–û–ë–õ–ï–ú–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò';
            }

            if (filteredIssues.length === 0) {
                this.showAccessibilityNotification(`‚ùå –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º —Ç–∏–ø–∞ "${filterType}" –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`, 'warning');
                return;
            }

            const accessibilityReport = {
                title: `‚ôø Accessibility Analyzer - ${title}`,
                timestamp: new Date().toISOString(),
                url: window.location.href,
                wcagLevel: this.state.wcagLevel,
                filterType: filterType,

                executiveSummary: {
                    totalIssues: filteredIssues.length,
                    criticalCount: filteredIssues.filter(i => i.severity === 'critical').length,
                    warningCount: filteredIssues.filter(i => i.severity === 'warning').length,
                    infoCount: filteredIssues.filter(i => i.severity === 'info').length,
                    automationPossible: filteredIssues.filter(i => i.automationPossible).length,
                    estimatedTotalTime: this.calculateTotalFixTime(filteredIssues),
                    affectedElements: filteredIssues.reduce((sum, issue) => sum + issue.affectedElements, 0)
                },

                wcagCompliance: {
                    level: this.state.wcagLevel,
                    criteriaBreached: [...new Set(filteredIssues.map(i => i.wcagCriteria))],
                    categoryBreakdown: this.getCategoryBreakdown(filteredIssues),
                    impactAssessment: this.getImpactAssessment(filteredIssues)
                },

                priorityRoadmap: this.generatePriorityRoadmap(filteredIssues),

                detailedFindings: filteredIssues
                    .sort((a, b) => this.getAccessibilityPriority(a) - this.getAccessibilityPriority(b))
                    .map((issue, index) => ({
                        id: index + 1,
                        severity: issue.severity,
                        category: issue.category,
                        wcagLevel: issue.wcagLevel,
                        wcagCriteria: issue.wcagCriteria,
                        issueType: issue.issueType,
                        description: issue.description,
                        impact: issue.impact,
                        affectedElements: issue.affectedElements,
                        automationPossible: issue.automationPossible,
                        estimatedFixTime: this.getEstimatedFixTime(issue.issueType),
                        fixes: issue.fixes.map((fix, fixIndex) => ({
                            id: `${index + 1}.${fixIndex + 1}`,
                            selector: fix.selector,
                            element: `${fix.tagName}${fix.className ? '.' + fix.className.split(' ').join('.') : ''}${fix.id ? '#' + fix.id : ''}`,
                            path: fix.elementPath,
                            currentState: fix.currentValues,
                            recommendedFix: fix.suggestedFix,
                            codeExample: this.generateCodeExample(fix, issue.issueType),
                            testingInstructions: this.generateTestingInstructions(issue.issueType)
                        }))
                    }))
            };

            // Add implementation guides
            accessibilityReport.implementationGuide = {
                quickWins: this.generateQuickWins(filteredIssues),
                automatedSolutions: this.generateAutomatedSolutions(filteredIssues),
                testingStrategy: this.generateTestingStrategy(filteredIssues),
                resources: this.generateAccessibilityResources()
            };

            try {
                await navigator.clipboard.writeText(JSON.stringify(accessibilityReport, null, 2));

                const typeLabels = {
                    'all': '–ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
                    'critical': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
                    'automated': '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π'
                };

                this.showAccessibilityNotification(`‚úÖ ${typeLabels[filterType]} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!`, 'success');

                // Enhanced console output
                console.group(`‚ôø Accessibility Report - ${title}`);
                console.log('üìä Executive Summary:', accessibilityReport.executiveSummary);
                console.log('üéØ WCAG Compliance:', accessibilityReport.wcagCompliance);
                console.log('üìã Priority Roadmap:', accessibilityReport.priorityRoadmap);
                console.log('üìñ Implementation Guide:', accessibilityReport.implementationGuide);
                console.log('üîß Full Report:', accessibilityReport);
                console.groupEnd();

            } catch (err) {
                console.error('Clipboard error:', err);
                this.showAccessibilityNotification(`üìã –û—Ç—á–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å`, 'info');
                console.log(`Accessibility Report - ${title}:`, accessibilityReport);
            }
        },

        async copyWCAGReport() {
            const wcagReport = {
                title: 'üèÜ WCAG 2.1 Compliance Report',
                timestamp: new Date().toISOString(),
                url: window.location.href,
                testedLevel: this.state.wcagLevel,

                complianceSummary: {
                    overallScore: this.calculateWCAGScore(),
                    levelACompliance: this.checkLevelCompliance('A'),
                    levelAACompliance: this.checkLevelCompliance('AA'),
                    levelAAACompliance: this.checkLevelCompliance('AAA')
                },

                principleBreakdown: {
                    perceivable: this.getPrincipleIssues('perceivable'),
                    operable: this.getPrincipleIssues('operable'),
                    understandable: this.getPrincipleIssues('understandable'),
                    robust: this.getPrincipleIssues('robust')
                },

                criteriaStatus: this.generateCriteriaStatus(),
                recommendations: this.generateWCAGRecommendations(),
                auditTrail: {
                    analyzer: 'Accessibility Analyzer v1.0',
                    testingDate: new Date().toISOString(),
                    testingScope: 'Automated scan + Manual review required',
                    limitations: 'This automated scan covers approximately 30-40% of WCAG criteria. Manual testing required for complete compliance.'
                }
            };

            try {
                await navigator.clipboard.writeText(JSON.stringify(wcagReport, null, 2));
                this.showAccessibilityNotification('‚úÖ WCAG –æ—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
                console.log('üèÜ WCAG Compliance Report:', wcagReport);
            } catch (err) {
                console.log('üèÜ WCAG Compliance Report:', wcagReport);
                this.showAccessibilityNotification('üìã WCAG –æ—Ç—á–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å', 'info');
            }
        },

        // === CALCULATION METHODS ===
        calculateTotalFixTime(issues) {
            const timeMap = {
                'contrast-aa': 10,
                'contrast-aaa': 10,
                'focus-accessibility': 15,
                'missing-accessible-name': 8,
                'missing-required-state': 5,
                'touch-target-size': 12,
                'readability-issues': 20
            };

            return issues.reduce((total, issue) => {
                const timePerElement = timeMap[issue.issueType] || 10;
                return total + (timePerElement * issue.affectedElements);
            }, 0);
        },

        getAccessibilityPriority(issue) {
            const severityWeight = {
                critical: 1,
                warning: 2,
                info: 3
            };
            const categoryWeight = {
                semantic: 0.1,
                keyboard: 0.2,
                visual: 0.3,
                motor: 0.4,
                cognitive: 0.5
            };

            return severityWeight[issue.severity] + (categoryWeight[issue.category] || 0.5);
        },

        getCategoryBreakdown(issues) {
            const breakdown = {};
            issues.forEach(issue => {
                if (!breakdown[issue.category]) {
                    breakdown[issue.category] = {
                        count: 0,
                        severity: {
                            critical: 0,
                            warning: 0,
                            info: 0
                        }
                    };
                }
                breakdown[issue.category].count++;
                breakdown[issue.category].severity[issue.severity]++;
            });
            return breakdown;
        },

        getImpactAssessment(issues) {
            const impacts = {
                screenReaders: 0,
                keyboardUsers: 0,
                visuallyImpaired: 0,
                motorImpaired: 0,
                cognitiveImpaired: 0
            };

            issues.forEach(issue => {
                switch (issue.category) {
                    case 'semantic':
                        impacts.screenReaders += issue.affectedElements;
                        break;
                    case 'keyboard':
                        impacts.keyboardUsers += issue.affectedElements;
                        break;
                    case 'visual':
                        impacts.visuallyImpaired += issue.affectedElements;
                        break;
                    case 'motor':
                        impacts.motorImpaired += issue.affectedElements;
                        break;
                    case 'cognitive':
                        impacts.cognitiveImpaired += issue.affectedElements;
                        break;
                }
            });

            return impacts;
        },

        generatePriorityRoadmap(issues) {
            const critical = issues.filter(i => i.severity === 'critical');
            const warning = issues.filter(i => i.severity === 'warning');
            const info = issues.filter(i => i.severity === 'info');

            return {
                phase1_immediate: {
                    description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
                    issues: critical.length,
                    estimatedTime: this.calculateTotalFixTime(critical) + ' –º–∏–Ω—É—Ç',
                    focus: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
                },
                phase2_important: {
                    description: '–í–∞–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è - —Å–ª–µ–¥—É—é—â–∏–µ 2 –Ω–µ–¥–µ–ª–∏',
                    issues: warning.length,
                    estimatedTime: this.calculateTotalFixTime(warning) + ' –º–∏–Ω—É—Ç',
                    focus: '–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞'
                },
                phase3_enhancement: {
                    description: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è',
                    issues: info.length,
                    estimatedTime: this.calculateTotalFixTime(info) + ' –º–∏–Ω—É—Ç',
                    focus: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ AAA'
                }
            };
        },

        generateQuickWins(issues) {
            const quickWins = issues.filter(issue =>
                issue.automationPossible && ['missing-accessible-name', 'contrast-aa', 'touch-target-size'].includes(issue.issueType)
            );

            return quickWins.map(issue => ({
                type: issue.issueType,
                elements: issue.affectedElements,
                estimatedTime: this.getEstimatedFixTime(issue.issueType),
                automation: 'CSS/HTML changes',
                impact: 'High accessibility improvement'
            }));
        },

        generateAutomatedSolutions(issues) {
            const solutions = {};

            issues.filter(i => i.automationPossible).forEach(issue => {
                if (!solutions[issue.issueType]) {
                    solutions[issue.issueType] = {
                        description: issue.description,
                        solution: this.getAutomatedSolution(issue.issueType),
                        elements: []
                    };
                }
                solutions[issue.issueType].elements.push(...issue.fixes);
            });

            return solutions;
        },

        getAutomatedSolution(issueType) {
            const solutions = {
                'contrast-aa': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ 4.5:1',
                'missing-accessible-name': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ aria-label –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞',
                'touch-target-size': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ padding –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ 44x44px',
                'focus-accessibility': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ outline –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ'
            };

            return solutions[issueType] || '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞';
        },

        generateTestingStrategy(issues) {
            const categories = [...new Set(issues.map(i => i.category))];

            return {
                automated: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ accessibility scanners (axe-core, Pa11y, Lighthouse)',
                manual: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä–∞–º–∏ (NVDA, JAWS, VoiceOver)',
                userTesting: '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏',
                categories: categories.map(cat => ({
                    category: cat,
                    tools: this.getTestingTools(cat),
                    methods: this.getTestingMethods(cat)
                }))
            };
        },

        getTestingTools(category) {
            const tools = {
                'visual': ['Colour Contrast Analyser', 'Stark plugin', 'WebAIM Contrast Checker'],
                'keyboard': ['Keyboard navigation', 'Tab order testing', 'Focus indicators'],
                'semantic': ['NVDA', 'JAWS', 'VoiceOver', 'axe DevTools'],
                'motor': ['Switch navigation', 'Voice control', 'Touch target testing'],
                'cognitive': ['Reading level analysis', 'Plain language review', 'User testing']
            };

            return tools[category] || ['Manual testing'];
        },

        getTestingMethods(category) {
            const methods = {
                'visual': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏, —Ü–≤–µ—Ç–æ–≤–æ–π –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏–∏, —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ 200%',
                'keyboard': '–ù–∞–≤–∏–≥–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞, –ª–æ–≤—É—à–µ–∫ —Ñ–æ–∫—É—Å–∞',
                'semantic': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä–∞–º–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –º–µ—Ç–æ–∫',
                'motor': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Å–∞–Ω–∏—è, —Ç–∞–π–º-–∞—É—Ç–æ–≤, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤–≤–æ–¥–∞',
                'cognitive': '–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            };

            return methods[category] || '–û–±—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏';
        },

        generateAccessibilityResources() {
            return {
                wcagGuidelines: 'https://www.w3.org/WAI/WCAG21/quickref/',
                testingTools: [
                    'https://www.deque.com/axe/',
                    'https://wave.webaim.org/',
                    'https://github.com/pa11y/pa11y'
                ],
                screenReaders: [
                    'NVDA (Windows, free)',
                    'JAWS (Windows, commercial)',
                    'VoiceOver (macOS/iOS, built-in)',
                    'TalkBack (Android, built-in)'
                ],
                learningResources: [
                    'WebAIM: https://webaim.org/',
                    'A11y Project: https://www.a11yproject.com/',
                    'MDN Accessibility: https://developer.mozilla.org/en-US/docs/Web/Accessibility'
                ]
            };
        },

        // === WCAG COMPLIANCE METHODS ===
        calculateWCAGScore() {
            const totalPossible = this.getAllWCAGCriteria().length;
            const failed = new Set(this.state.fixableIssues.map(i => i.wcagCriteria)).size;
            return Math.round(((totalPossible - failed) / totalPossible) * 100);
        },

        checkLevelCompliance(level) {
            const levelIssues = this.state.fixableIssues.filter(i => i.wcagLevel === level);
            return {
                passed: levelIssues.length === 0,
                failedCriteria: levelIssues.length,
                totalCriteria: this.getWCAGCriteriaForLevel(level).length
            };
        },

        getPrincipleIssues(principle) {
            const principleMap = {
                'perceivable': ['contrast-aa', 'contrast-aaa', 'missing-accessible-name'],
                'operable': ['focus-accessibility', 'touch-target-size', 'keyboard'],
                'understandable': ['readability-issues', 'invalid-role'],
                'robust': ['missing-required-state', 'aria-conflict']
            };

            const relevantIssues = this.state.fixableIssues.filter(issue =>
                principleMap[principle]?.some(type => issue.issueType.includes(type))
            );

            return {
                issueCount: relevantIssues.length,
                severity: this.categorizeBySeverity(relevantIssues),
                description: this.getPrincipleDescription(principle)
            };
        },

        getPrincipleDescription(principle) {
            const descriptions = {
                'perceivable': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å',
                'operable': '–≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º–∏',
                'understandable': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏',
                'robust': '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–¥–µ–∂–Ω—ã–º –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —à–∏—Ä–æ–∫–∏–º –∫—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤'
            };

            return descriptions[principle] || '';
        },

        categorizeBySeverity(issues) {
            return {
                critical: issues.filter(i => i.severity === 'critical').length,
                warning: issues.filter(i => i.severity === 'warning').length,
                info: issues.filter(i => i.severity === 'info').length
            };
        },

        generateCriteriaStatus() {
            const allCriteria = this.getAllWCAGCriteria();
            const failedCriteria = new Set(this.state.fixableIssues.map(i => i.wcagCriteria));

            return allCriteria.map(criteria => ({
                criteria: criteria.name,
                level: criteria.level,
                status: failedCriteria.has(criteria.name) ? 'FAIL' : 'PASS',
                description: criteria.description
            }));
        },

        getAllWCAGCriteria() {
            return [{
                    name: '1.4.3 Contrast (Minimum)',
                    level: 'AA',
                    description: 'Text contrast ratio of at least 4.5:1'
                },
                {
                    name: '1.4.6 Contrast (Enhanced)',
                    level: 'AAA',
                    description: 'Text contrast ratio of at least 7:1'
                },
                {
                    name: '2.4.7 Focus Visible',
                    level: 'AA',
                    description: 'Keyboard focus indicator is visible'
                },
                {
                    name: '4.1.2 Name, Role, Value',
                    level: 'A',
                    description: 'Elements have accessible names and roles'
                },
                {
                    name: '2.5.5 Target Size',
                    level: 'AAA',
                    description: 'Touch targets are at least 44x44px'
                },
                {
                    name: '3.1.5 Reading Level',
                    level: 'AAA',
                    description: 'Content is readable at appropriate level'
                }
            ];
        },

        getWCAGCriteriaForLevel(level) {
            return this.getAllWCAGCriteria().filter(c => c.level === level);
        },

        generateWCAGRecommendations() {
            const recommendations = [];

            this.state.fixableIssues.forEach(issue => {
                if (issue.severity === 'critical') {
                    recommendations.push({
                        priority: 'High',
                        criterion: issue.wcagCriteria,
                        recommendation: `Address ${issue.issueType} affecting ${issue.affectedElements} elements`,
                        impact: issue.impact
                    });
                }
            });

            return recommendations.slice(0, 10); // Top 10 recommendations
        },

        // === ADVANCED TESTING FEATURES ===
        rerunContrastCheck() {
            this.showAccessibilityNotification('üîÑ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å...', 'info');

            // Clear previous contrast issues
            this.state.contrastIssues = [];
            this.state.fixableIssues = this.state.fixableIssues.filter(
                issue => !issue.issueType.includes('contrast')
            );

            // Re-run contrast analysis
            this.analyzeColorContrast();

            // Update interface
            const container = document.getElementById('a11y-issues-container');
            this.renderIssues(container, 'visual');

            this.showAccessibilityNotification('‚úÖ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'success');
        },

        simulateScreenReader() {
            this.showAccessibilityNotification('üîä –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä–∞...', 'info');

            const focusableElements = document.querySelectorAll(
                this.config.focusableElements.join(',')
            );

            const readingOrder = [];
            const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
            const landmarks = document.querySelectorAll('header, nav, main, section, article, aside, footer');

            // Create screen reader simulation
            console.group('üîä Screen Reader Simulation');

            console.log('üìë Page Structure:');
            Array.from(headings).forEach((heading, index) => {
                const level = heading.tagName.charAt(1);
                const text = heading.textContent?.trim() || '(empty)';
                console.log(`  ${' '.repeat((parseInt(level) - 1) * 2)}H${level}: ${text}`);
            });

            console.log('\nüèõÔ∏è Landmarks:');
            Array.from(landmarks).forEach(landmark => {
                const role = landmark.getAttribute('role') || landmark.tagName.toLowerCase();
                const name = this.getAccessibleName(landmark) || '(unnamed)';
                console.log(`  ${role}: ${name}`);
            });

            console.log('\n‚å®Ô∏è Focusable Elements:');
            Array.from(focusableElements).slice(0, 20).forEach((element, index) => {
                const name = this.getAccessibleName(element) || '(no accessible name)';
                const role = element.getAttribute('role') || element.tagName.toLowerCase();
                console.log(`  ${index + 1}. ${role}: ${name}`);
            });

            if (focusableElements.length > 20) {
                console.log(`  ... and ${focusableElements.length - 20} more focusable elements`);
            }

            console.groupEnd();

            this.showAccessibilityNotification(
                `üìä –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${headings.length} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, ${landmarks.length} landmarks, ${focusableElements.length} —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`,
                'success'
            );
        },

        reanalyzeWithLevel(level) {
            this.state.wcagLevel = level;

            // Re-filter issues based on level
            const container = document.getElementById('a11y-issues-container');
            this.renderIssues(container, 'all');

            // Update stats
            this.updateStatsDashboard();
        },

        updateStatsDashboard() {
            const stats = document.querySelector('#accessibility-analyzer-results > div:nth-child(2)');
            if (stats) {
                const newStats = this.createStatsDashboard();
                stats.innerHTML = newStats.innerHTML;
            }
        },

        // === CLEANUP AND UTILITIES ===
        clearHighlights() {
            this.state.highlightedElements.forEach(overlay => {
                overlay.style.opacity = '0';
                overlay.style.transform = 'scale(0.8)';
                setTimeout(() => {
                    if (overlay.parentNode) {
                        overlay.parentNode.removeChild(overlay);
                    }
                }, 300);
            });
            this.state.highlightedElements.clear();

            // Remove pulse styles
            const pulseStyles = document.getElementById('a11y-pulse-styles');
            if (pulseStyles) {
                pulseStyles.remove();
            }
        },

        getSeverityColor(severity) {
            const colors = {
                critical: '#ff4757',
                warning: '#ffa502',
                info: '#3742fa'
            };
            return colors[severity] || '#666';
        },

        showAccessibilityNotification(message, type = 'info') {
            const notification = document.createElement('div');

            const colors = {
                success: 'linear-gradient(135deg, #00d2ff 0%, #3a7bd5 100%)',
                info: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                warning: 'linear-gradient(135deg, #ffa502 0%, #ff6348 100%)',
                error: 'linear-gradient(135deg, #ff4757 0%, #ff3838 100%)'
            };

            notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%) translateY(-30px);
        background: ${colors[type] || colors.info};
        color: white;
        padding: 16px 24px;
        border-radius: 10px;
        font-family: 'SF Mono', Consolas, monospace;
        font-size: 13px;
        font-weight: 500;
        z-index: 10003;
        box-shadow: 0 10px 40px rgba(0,0,0,0.3);
        backdrop-filter: blur(15px);
        opacity: 0;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        max-width: 500px;
        text-align: center;
        border: 1px solid rgba(255,255,255,0.1);
      `;

            notification.textContent = message;
            document.body.appendChild(notification);

            // Animate in
            requestAnimationFrame(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(-50%) translateY(0)';
            });

            // Animate out and remove
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(-50%) translateY(-30px)';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 400);
            }, 4000);
        },

        exportAccessibilityReport() {
            console.group('‚ôø Complete Accessibility Analysis Report');

            // Executive Summary
            console.log('üìä Executive Summary:');
            console.table({
                'Total Issues': this.state.fixableIssues.length,
                'Critical Issues': this.state.fixableIssues.filter(i => i.severity === 'critical').length,
                'WCAG Level': this.state.wcagLevel,
                'Compliance Score': this.calculateWCAGScore() + '%',
                'Automation Possible': this.state.fixableIssues.filter(i => i.automationPossible).length
            });

            // Detailed breakdown by category
            ['visual', 'keyboard', 'semantic', 'motor', 'cognitive'].forEach(category => {
                const categoryIssues = this.state.fixableIssues.filter(i => i.category === category);
                if (categoryIssues.length > 0) {
                    console.group(`${this.getCategoryIcon(category)} ${category.toUpperCase()} Issues (${categoryIssues.length})`);

                    categoryIssues.forEach(issue => {
                        console.log(`${this.getSeverityIcon(issue.severity)} ${issue.description}`);
                        console.log(`   WCAG: ${issue.wcagCriteria} (${issue.wcagLevel})`);
                        console.log(`   Elements: ${issue.affectedElements} | Impact: ${issue.impact}`);
                        console.log(`   Automation: ${issue.automationPossible ? '‚úÖ Yes' : '‚ùå Manual'}`);
                    });

                    console.groupEnd();
                }
            });

            // Testing recommendations
            console.log('\nüß™ Testing Recommendations:');
            console.log('1. Run axe-core DevTools extension');
            console.log('2. Test with keyboard navigation only');
            console.log('3. Test with screen readers (NVDA, JAWS, VoiceOver)');
            console.log('4. Verify color contrast with tools');
            console.log('5. Test on mobile devices for touch targets');

            console.groupEnd();

            this.showAccessibilityNotification('üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å', 'success');
        },

        getCategoryIcon(category) {
            const icons = {
                'visual': 'üëÅÔ∏è',
                'keyboard': '‚å®Ô∏è',
                'semantic': 'üè∑Ô∏è',
                'motor': 'ü§≤',
                'cognitive': 'üß†'
            };
            return icons[category] || '‚ùì';
        },

        getSeverityIcon(severity) {
            const icons = {
                'critical': 'üö®',
                'warning': '‚ö†Ô∏è',
                'info': 'üí°'
            };
            return icons[severity] || 'üìã';
        },

        getEstimatedFixTime(issueType) {
            const times = {
                'contrast-aa': '5-10 –º–∏–Ω',
                'contrast-aaa': '5-10 –º–∏–Ω',
                'focus-accessibility': '10-15 –º–∏–Ω',
                'missing-accessible-name': '3-8 –º–∏–Ω',
                'missing-required-state': '2-5 –º–∏–Ω',
                'touch-target-size': '8-12 –º–∏–Ω',
                'readability-issues': '15-30 –º–∏–Ω',
                'invalid-role': '5-10 –º–∏–Ω',
                'aria-conflict': '5-15 –º–∏–Ω'
            };
            return times[issueType] || '5-15 –º–∏–Ω';
        },

        generateCodeExample(fix, issueType) {
            const examples = {
                'contrast-aa': `/* –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ */\n${fix.selector} {\n  color: ${fix.suggestedFix.color || '#000'};\n  background-color: ${fix.suggestedFix['background-color'] || '#fff'};\n}`,
                'missing-accessible-name': `<!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–º–µ–Ω–∏ -->\n<${fix.tagName} aria-label="${fix.suggestedFix['aria-label'] || '–û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞'}">`,
                'focus-accessibility': `/* –£–ª—É—á—à–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ */\n${fix.selector}:focus {\n  outline: 2px solid #005fcc;\n  outline-offset: 2px;\n}`,
                'touch-target-size': `/* –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Å–∞–Ω–∏—è */\n${fix.selector} {\n  min-width: 44px;\n  min-height: 44px;\n  padding: 8px;\n}`,
                'missing-required-state': `<!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è -->\n<${fix.tagName} aria-expanded="false" aria-checked="false">`,
                'readability-issues': `/* –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */\n${fix.selector} {\n  font-size: ${fix.suggestedFix['font-size'] || '16px'};\n  line-height: ${fix.suggestedFix['line-height'] || '1.5'};\n  max-width: 75ch;\n}`
            };

            return examples[issueType] || `/* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ${issueType} */\n${fix.selector} {\n  /* –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ CSS –ø—Ä–∞–≤–∏–ª–∞ */\n}`;
        },

        generateTestingInstructions(issueType) {
            const instructions = {
                'contrast-aa': '1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebAIM Contrast Checker\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞\n3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ‚â• 4.5:1',
                'missing-accessible-name': '1. –í–∫–ª—é—á–∏—Ç–µ —Å–∫—Ä–∏–Ω-—Ä–∏–¥–µ—Ä (NVDA/JAWS)\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å Tab\n3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
                'focus-accessibility': '1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n2. –ù–∞–∂–º–∏—Ç–µ Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–æ–∫—É—Å –≤–∏–¥–∏–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ',
                'touch-target-size': '1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –ª–µ–≥–∫–æ –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è –ø–∞–ª—å—Ü–µ–º\n3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π',
                'readability-issues': '1. –ü—Ä–æ—á—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Å–ª—É—Ö\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É –ø–æ–Ω–∏–º–∞–Ω–∏—è\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏'
            };

            return instructions[issueType] || '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏';
        },

        cleanup() {
            this.clearHighlights();

            const container = document.getElementById('accessibility-analyzer-results');
            if (container) {
                container.style.opacity = '0';
                container.style.transform = 'translateY(-20px) scale(0.95)';
                setTimeout(() => {
                    if (container.parentNode) {
                        container.parentNode.removeChild(container);
                    }
                }, 300);
            }

            // Clean up color cache
            this.state.colorCache.clear();

            // Remove any remaining styles
            const pulseStyles = document.getElementById('a11y-pulse-styles');
            if (pulseStyles) {
                pulseStyles.remove();
            }
        },

        // === MAIN EXECUTION METHOD ===
        run() {
            console.log('üöÄ Starting Comprehensive Accessibility Analysis...');

            // Show loading notification
            this.showAccessibilityNotification('üîç –í—ã–ø–æ–ª–Ω—è—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WCAG 2.1...', 'info');

            // Clear previous results
            this.state = {
                contrastIssues: [],
                focusIssues: [],
                ariaIssues: [],
                keyboardIssues: [],
                readabilityIssues: [],
                allIssues: [],
                fixableIssues: [],
                highlightedElements: new Set(),
                wcagLevel: 'AA',
                colorCache: new Map()
            };

            this.cleanup();

            try {
                // Run comprehensive analysis
                this.analyzeAccessibility();

                // Consolidate all issues into fixableIssues for interface
                this.consolidateIssues();

                setTimeout(() => {
                    const wcagScore = this.calculateWCAGScore();
                    
                    if (this.state.fixableIssues.length === 0) {
                        console.log('‚úÖ Accessibility Analysis Complete: No issues found!');
                        
                        if (wcagScore === 0) {
                            this.showAccessibilityNotification('‚ö†Ô∏è WCAG Compliance: 0% - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warning');
                        } else {
                            this.showAccessibilityNotification('üéâ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', 'success');
                        }

                        // Show success interface (will show full interface if WCAG score is low)
                        this.createSuccessInterface();
                        return;
                    }

                    // Create full analysis interface (including when WCAG score is 0%)
                    this.createAccessibilityInterface();

                    const criticalCount = this.state.fixableIssues.filter(i => i.severity === 'critical').length;

                    console.log(`‚ôø Accessibility Analysis complete. Found ${this.state.fixableIssues.length} issues to address.`);
                    console.log(`üìä WCAG Compliance Score: ${wcagScore}%`);

                    // Show completion notification
                    const message = criticalCount > 0 ?
                        `üö® –ù–∞–π–¥–µ–Ω–æ ${this.state.fixableIssues.length} –ø—Ä–æ–±–ª–µ–º (${criticalCount} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö) ‚Ä¢ WCAG: ${wcagScore}%` :
                        `üìã –ù–∞–π–¥–µ–Ω–æ ${this.state.fixableIssues.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è ‚Ä¢ WCAG: ${wcagScore}%`;

                    this.showAccessibilityNotification(message, criticalCount > 0 ? 'warning' : 'info');
                }, 1000);

            } catch (error) {
                console.error('Accessibility Analysis Error:', error);
                this.showAccessibilityNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.', 'error');
            }
        },

        // Consolidate all issue types into fixableIssues array
        consolidateIssues() {
            // Add contrast issues
            this.state.contrastIssues.forEach(issue => {
                if (!this.state.fixableIssues.find(f => f.issueType === issue.type &&
                        f.fixes.some(fix => fix.selector === this.generateSelector(issue.element)))) {
                    // Already added in addContrastIssue method
                }
            });

            // Add focus issues  
            this.state.focusIssues.forEach(issue => {
                // Already added in addFocusIssue method
            });

            // Add ARIA issues
            this.state.ariaIssues.forEach(issue => {
                // Already added in addAriaIssue method
            });

            // Add keyboard issues
            this.state.keyboardIssues.forEach(issue => {
                this.createFixableIssue(
                    'keyboard-navigation',
                    issue.severity,
                    issue.elements, {
                        'issue': issue.type
                    }, {
                        'review': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
                    },
                    issue.description
                );
            });

            // Add readability issues
            this.state.readabilityIssues.forEach(issue => {
                // Already added in addReadabilityIssue method
            });

            // Add screen reader issues
            this.state.allIssues.forEach(issue => {
                if (issue.type === 'screen-reader') {
                    this.createFixableIssue(
                        issue.subType,
                        issue.severity,
                        issue.elements, {
                            'issue': issue.subType
                        }, {
                            'review': '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
                        },
                        issue.description
                    );
                }
            });
        },

        // Create success interface for when no issues found
        createSuccessInterface() {
            const wcagScore = this.calculateWCAGScore();
            const isLowScore = wcagScore < 50;
            
            const container = document.createElement('div');
            container.id = 'accessibility-success-results';
            container.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        width: ${isLowScore ? '650px' : '400px'};
        max-height: 80vh;
        background: linear-gradient(135deg, ${isLowScore ? '#1a1a2e 0%, #16213e 100%' : '#00d2ff 0%, #3a7bd5 100%'});
        border: 2px solid ${isLowScore ? '#0f3460' : 'transparent'};
        border-radius: 16px;
        color: white;
        font-family: 'SF Mono', Consolas, monospace;
        text-align: center;
        z-index: 10000;
        overflow: hidden;
        box-shadow: 0 16px 48px rgba(0,0,0,0.5);
        backdrop-filter: blur(20px);
        animation: ${isLowScore ? 'none' : 'successPulse 2s ease-in-out infinite alternate'};
      `;

            if (isLowScore) {
                // Show full interface with export tabs for low scores
                const header = this.createHeader();
                const stats = this.createStatsDashboard();
                const filterTabs = this.createFilterTabs();
                const issuesContainer = document.createElement('div');
                issuesContainer.id = 'a11y-issues-container';
                issuesContainer.style.cssText = 'padding: 12px; max-height: 450px; overflow-y: auto;';
                const controls = this.createControls();

                container.appendChild(header);
                container.appendChild(stats);
                container.appendChild(filterTabs);
                container.appendChild(issuesContainer);
                container.appendChild(controls);

                this.setupEventListeners(container);
                
                // Show special message for 0% score
                if (wcagScore === 0) {
                    issuesContainer.innerHTML = `
                        <div style="padding: 40px 20px; text-align: center; color: #ff4757;">
                            <div style="font-size: 64px; margin-bottom: 20px;">‚ö†Ô∏è</div>
                            <div style="font-size: 20px; font-weight: bold; margin-bottom: 10px;">WCAG Compliance: 0%</div>
                            <div style="font-size: 14px; color: #ccc; margin-bottom: 20px;">
                                –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é.<br>
                                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –≤—ã—à–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º.
                            </div>
                            <div style="background: rgba(255,71,87,0.1); padding: 15px; border-radius: 8px; border: 1px solid rgba(255,71,87,0.3); font-size: 12px;">
                                üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º<br>
                                üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "–≠–∫—Å–ø–æ—Ä—Ç" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                            </div>
                        </div>
                    `;
                } else {
                    this.renderIssues(issuesContainer, 'all');
                }
            } else {
                // Show simple success message for high scores
                container.innerHTML = `
        <div style="padding: 40px 30px;">
          <div style="font-size: 80px; margin-bottom: 20px;">üèÜ</div>
          <div style="font-size: 24px; font-weight: bold; margin-bottom: 10px;">–û—Ç–ª–∏—á–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å!</div>
          <div style="font-size: 14px; opacity: 0.9; margin-bottom: 20px;">
            WCAG ${this.state.wcagLevel} Compliance: ${wcagScore}%
          </div>
          <div style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 10px; margin-bottom: 20px; font-size: 12px;">
            ‚úÖ –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞<br>
            ‚úÖ –§–æ–∫—É—Å–∏—Ä—É–µ–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤<br>
            ‚úÖ ARIA —Ä–∞–∑–º–µ—Ç–∫–∞<br>
            ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞<br>
            ‚úÖ –†–∞–∑–º–µ—Ä—ã –∫–∞—Å–∞–Ω–∏—è
          </div>
          <button id="close-success" style="background: rgba(255,255,255,0.2); border: none; color: white; padding: 10px 20px; border-radius: 25px; cursor: pointer; font-family: inherit;">
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      `;
            }

            // Add success animation styles
            const style = document.createElement('style');
            style.textContent = `
        @keyframes successPulse {
          0% { box-shadow: 0 20px 60px rgba(0,0,0,0.3), 0 0 0 0 rgba(58,123,213,0.4); }
          100% { box-shadow: 0 25px 80px rgba(0,0,0,0.4), 0 0 0 20px rgba(58,123,213,0); }
        }
      `;
            document.head.appendChild(style);

            // Add event listener for close button
            const closeButton = container.querySelector('#close-success') || container.querySelector('#close-a11y-analyzer');
            if (closeButton) {
                closeButton.addEventListener('click', () => {
                    if (isLowScore) {
                        this.cleanup();
                    } else {
                        container.style.opacity = '0';
                        container.style.transform = 'translate(-50%, -50%) scale(0.8)';
                        setTimeout(() => {
                            if (container.parentNode) {
                                container.parentNode.removeChild(container);
                            }
                            if (style && style.parentNode) {
                                style.parentNode.removeChild(style);
                            }
                        }, 300);
                    }
                });
            }

            document.body.appendChild(container);
        }
    };

    // Launch the comprehensive accessibility analyzer
    ACCESSIBILITY_ANALYZER.run();
})();
