(() => {
  'use strict';
  
  const TYPOGRAPHY_ANALYZER = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    config: {
      minLineHeightRatio: 1.2,
      maxLineHeightRatio: 1.8,
      suspiciousWeights: ['100', '200', '800', '900'],
      commonFontSizes: ['12px', '14px', '16px', '18px', '20px', '24px', '32px'],
      redundancyThreshold: 1 // —ç–ª–µ–º–µ–Ω—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
    },

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    state: {
      fontMap: new Map(),
      issues: [],
      highlightedElements: new Set(),
      fixableIssues: [] // –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
    },

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–µ
    collectTypographyData() {
      const allElements = document.querySelectorAll('*:not(script):not(style):not(meta):not(link)');
      
      allElements.forEach(element => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (element.offsetParent === null && element.tagName !== 'HTML') return;
        
        const computedStyle = getComputedStyle(element);
        const fontMetrics = {
          fontFamily: computedStyle.fontFamily,
          fontSize: computedStyle.fontSize,
          fontWeight: computedStyle.fontWeight,
          lineHeight: computedStyle.lineHeight,
          letterSpacing: computedStyle.letterSpacing,
          textTransform: computedStyle.textTransform,
          element: element,
          tagName: element.tagName.toLowerCase(),
          className: element.className,
          textContent: element.textContent?.trim().substring(0, 50) || ''
        };

        const key = `${fontMetrics.fontFamily}|${fontMetrics.fontSize}|${fontMetrics.fontWeight}|${fontMetrics.lineHeight}`;
        
        if (!this.state.fontMap.has(key)) {
          this.state.fontMap.set(key, {
            metrics: fontMetrics,
            elements: [],
            count: 0
          });
        }
        
        const entry = this.state.fontMap.get(key);
        entry.elements.push(element);
        entry.count++;
      });
    },

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
    generateSelector(element) {
      let selector = element.tagName.toLowerCase();
      
      // –î–æ–±–∞–≤–ª—è–µ–º ID –µ—Å–ª–∏ –µ—Å—Ç—å
      if (element.id) {
        return `#${element.id}`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (element.className && typeof element.className === 'string') {
        const classes = element.className.trim().split(/\s+/);
        if (classes.length > 0 && classes[0] !== '') {
          selector += '.' + classes.join('.');
        }
      }
      
      // –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º nth-child
      const similarElements = document.querySelectorAll(selector);
      if (similarElements.length > 1) {
        const parent = element.parentElement;
        if (parent) {
          const siblings = Array.from(parent.children).filter(child => 
            child.tagName === element.tagName && 
            child.className === element.className
          );
          if (siblings.length > 1) {
            const index = siblings.indexOf(element) + 1;
            selector += `:nth-child(${index})`;
          }
        }
      }
      
      return selector;
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    createFixableIssue(type, severity, elements, currentValues, suggestedFix, reasoning) {
      const fixes = elements.map(element => ({
        selector: this.generateSelector(element),
        tagName: element.tagName.toLowerCase(),
        className: element.className || null,
        textPreview: element.textContent?.trim().substring(0, 30) || '(empty)',
        currentCSS: currentValues,
        suggestedCSS: suggestedFix,
        elementPath: this.getElementPath(element)
      }));

      this.state.fixableIssues.push({
        issueType: type,
        severity: severity,
        description: reasoning,
        affectedElements: fixes.length,
        fixes: fixes
      });
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    getElementPath(element) {
      const path = [];
      let current = element;
      
      while (current && current !== document.body) {
        let selector = current.tagName.toLowerCase();
        if (current.id) {
          selector += `#${current.id}`;
          path.unshift(selector);
          break;
        }
        if (current.className && typeof current.className === 'string') {
          const classes = current.className.trim().split(/\s+/);
          if (classes.length > 0 && classes[0] !== '') {
            selector += '.' + classes[0];
          }
        }
        path.unshift(selector);
        current = current.parentElement;
      }
      
      return path.join(' > ');
    },

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    analyzeIssues() {
      this.state.fontMap.forEach((data, key) => {
        const { metrics, elements, count } = data;
        const { fontSize, lineHeight, fontWeight, fontFamily } = metrics;
        
        // –ê–Ω–∞–ª–∏–∑ line-height
        const fontSizeNum = parseFloat(fontSize);
        const lineHeightNum = parseFloat(lineHeight);
        const lineHeightRatio = lineHeightNum / fontSizeNum;
        
        if (lineHeightRatio < this.config.minLineHeightRatio) {
          const suggestedLineHeight = Math.round(fontSizeNum * 1.4) + 'px';
          this.addIssue('critical', 'üìè –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π line-height', 
            `–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ${lineHeightRatio.toFixed(2)} < ${this.config.minLineHeightRatio}`, 
            elements, { fontSize, lineHeight });
          
          this.createFixableIssue(
            'line-height-too-small',
            'critical',
            elements,
            { 'line-height': lineHeight },
            { 'line-height': suggestedLineHeight },
            `Line-height —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π (${lineHeightRatio.toFixed(2)}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1.4-1.6 –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.`
          );
        } else if (lineHeightRatio > this.config.maxLineHeightRatio) {
          const suggestedLineHeight = Math.round(fontSizeNum * 1.5) + 'px';
          this.addIssue('warning', 'üìê –ò–∑–±—ã—Ç–æ—á–Ω—ã–π line-height', 
            `–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ ${lineHeightRatio.toFixed(2)} > ${this.config.maxLineHeightRatio}`, 
            elements, { fontSize, lineHeight });
            
          this.createFixableIssue(
            'line-height-too-large',
            'warning',
            elements,
            { 'line-height': lineHeight },
            { 'line-height': suggestedLineHeight },
            `Line-height –∏–∑–±—ã—Ç–æ—á–Ω—ã–π (${lineHeightRatio.toFixed(2)}). –ú–æ–∂–µ—Ç —É—Ö—É–¥—à–∞—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞.`
          );
        }
        
        // –ê–Ω–∞–ª–∏–∑ font-weight
        if (this.config.suspiciousWeights.includes(fontWeight)) {
          const suggestedWeight = fontWeight === '100' || fontWeight === '200' ? '400' : 
                                  fontWeight === '800' || fontWeight === '900' ? '700' : fontWeight;
          
          this.addIssue('warning', 'üí™ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π font-weight', 
            `font-weight: ${fontWeight}`, elements, { fontWeight });
            
          this.createFixableIssue(
            'extreme-font-weight',
            'warning',
            elements,
            { 'font-weight': fontWeight },
            { 'font-weight': suggestedWeight },
            `–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ font-weight (${fontWeight}). –ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.`
          );
        }
        
        // –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å)
        if (count <= this.config.redundancyThreshold) {
          this.addIssue('info', 'üîç –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è', 
            '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ', elements, metrics);
            
          this.createFixableIssue(
            'redundant-style',
            'info',
            elements,
            {
              'font-family': fontFamily,
              'font-size': fontSize,
              'font-weight': fontWeight,
              'line-height': lineHeight
            },
            '/* –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∏–ª–µ–º */',
            '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.'
          );
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤—ã—Ö —Å–µ–º–µ–π—Å—Ç–≤
        const familyLower = fontFamily.toLowerCase();
        if (familyLower.includes('serif') && familyLower.includes('sans')) {
          this.addIssue('warning', '‚ö†Ô∏è –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–µ–º–µ–π—Å—Ç–≤–∞', 
            'serif –∏ sans-serif –≤ –æ–¥–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏', elements, { fontFamily });
            
          this.createFixableIssue(
            'mixed-font-families',
            'warning',
            elements,
            { 'font-family': fontFamily },
            { 'font-family': '/* –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —Ç–∏–ø: serif –ò–õ–ò sans-serif */' },
            '–°–º–µ—à–∏–≤–∞–Ω–∏–µ serif –∏ sans-serif –≤ –æ–¥–Ω–æ–º font-family –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.'
          );
        }
        
        // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        if (!this.config.commonFontSizes.includes(fontSize) && fontSizeNum > 10) {
          const nearestSize = this.findNearestStandardSize(fontSizeNum);
          this.addIssue('info', 'üìä –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä', 
            `–†–∞–∑–º–µ—Ä ${fontSize} –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–∏–ø–∏—á–Ω—É—é —à–∫–∞–ª—É`, elements, { fontSize });
            
          this.createFixableIssue(
            'non-standard-size',
            'info',
            elements,
            { 'font-size': fontSize },
            { 'font-size': nearestSize },
            `–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–æ–π —à–∫–∞–ª—ã.`
          );
        }
      });
    },

    // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    findNearestStandardSize(currentSize) {
      const sizes = this.config.commonFontSizes.map(s => parseFloat(s));
      return sizes.reduce((prev, curr) => 
        Math.abs(curr - currentSize) < Math.abs(prev - currentSize) ? curr : prev
      ) + 'px';
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    addIssue(severity, type, description, elements, details) {
      this.state.issues.push({
        severity,
        type,
        description,
        elements: [...elements],
        details,
        count: elements.length
      });
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    createInteractiveTable() {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const container = document.createElement('div');
      container.id = 'typography-analyzer-results';
      container.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        width: 520px;
        max-height: 70vh;
        background: #1a1a1a;
        border: 2px solid #333;
        border-radius: 8px;
        color: #fff;
        font-family: 'SF Mono', Consolas, monospace;
        font-size: 12px;
        z-index: 10000;
        overflow-y: auto;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
      `;

      // Header
      const header = document.createElement('div');
      header.style.cssText = `
        padding: 12px 16px;
        background: #333;
        border-bottom: 1px solid #444;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
      `;
      header.innerHTML = `
        <span>üîç Typography Analyzer</span>
        <button id="close-analyzer" style="background:none;border:none;color:#fff;font-size:16px;cursor:pointer;">‚úï</button>
      `;

      // Stats
      const stats = document.createElement('div');
      stats.style.cssText = 'padding: 12px 16px; background: #2a2a2a; border-bottom: 1px solid #444;';
      const totalCombinations = this.state.fontMap.size;
      const criticalIssues = this.state.issues.filter(i => i.severity === 'critical').length;
      stats.innerHTML = `
        üìä –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${totalCombinations} | 
        üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${criticalIssues} |
        ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.state.issues.filter(i => i.severity === 'warning').length}
      `;

      // Table
      const table = document.createElement('div');
      table.style.cssText = 'padding: 8px;';
      
      this.state.issues.forEach((issue, index) => {
        const row = document.createElement('div');
        row.style.cssText = `
          padding: 8px 12px;
          margin: 4px 0;
          border-left: 4px solid ${this.getSeverityColor(issue.severity)};
          background: #2a2a2a;
          cursor: pointer;
          border-radius: 4px;
          transition: all 0.2s ease;
        `;
        
        row.innerHTML = `
          <div style="font-weight: bold; margin-bottom: 4px;">
            ${issue.type} <span style="color: #666;">(${issue.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)</span>
          </div>
          <div style="color: #ccc; font-size: 11px;">
            ${issue.description}
          </div>
          <div style="color: #888; font-size: 10px; margin-top: 4px;">
            –ö–ª–∏–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        row.addEventListener('click', () => this.highlightElements(issue.elements, index));
        row.addEventListener('mouseenter', () => {
          row.style.background = '#3a3a3a';
        });
        row.addEventListener('mouseleave', () => {
          row.style.background = '#2a2a2a';
        });

        table.appendChild(row);
      });

      // Controls
      const controls = document.createElement('div');
      controls.style.cssText = 'padding: 12px 16px; background: #333; border-top: 1px solid #444;';
      controls.innerHTML = `
        <button id="clear-highlights" style="background:#444;border:none;color:#fff;padding:6px 12px;border-radius:4px;cursor:pointer;margin-right:8px;">–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É</button>
        <button id="export-report" style="background:#0066cc;border:none;color:#fff;padding:6px 12px;border-radius:4px;cursor:pointer;margin-right:8px;">–≠–∫—Å–ø–æ—Ä—Ç –≤ –∫–æ–Ω—Å–æ–ª—å</button>
        <button id="copy-fixes" style="background:#00cc66;border:none;color:#fff;padding:6px 12px;border-radius:4px;cursor:pointer;">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è</button>
      `;

      // –°–±–æ—Ä–∫–∞
      container.appendChild(header);
      container.appendChild(stats);
      container.appendChild(table);
      container.appendChild(controls);

      // Event listeners
      container.querySelector('#close-analyzer').addEventListener('click', () => {
        this.cleanup();
      });
      
      container.querySelector('#clear-highlights').addEventListener('click', () => {
        this.clearHighlights();
      });
      
      container.querySelector('#export-report').addEventListener('click', () => {
        this.exportToConsole();
      });

      // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
      container.querySelector('#copy-fixes').addEventListener('click', () => {
        this.copyFixesToClipboard();
      });

      document.body.appendChild(container);
    },

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    async copyFixesToClipboard() {
      const fixesObject = {
        timestamp: new Date().toISOString(),
        url: window.location.href,
        summary: {
          totalIssues: this.state.fixableIssues.length,
          critical: this.state.fixableIssues.filter(i => i.severity === 'critical').length,
          warning: this.state.fixableIssues.filter(i => i.severity === 'warning').length,
          info: this.state.fixableIssues.filter(i => i.severity === 'info').length
        },
        fixes: this.state.fixableIssues.map(issue => ({
          type: issue.issueType,
          severity: issue.severity,
          description: issue.description,
          elementsCount: issue.affectedElements,
          fixes: issue.fixes.map(fix => ({
            selector: fix.selector,
            element: `${fix.tagName}${fix.className ? '.' + fix.className.split(' ').join('.') : ''}`,
            textContent: fix.textPreview,
            path: fix.elementPath,
            currentCSS: fix.currentCSS,
            suggestedCSS: fix.suggestedCSS
          }))
        }))
      };

      try {
        await navigator.clipboard.writeText(JSON.stringify(fixesObject, null, 2));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
        this.showNotification('‚úÖ –û–±—ä–µ–∫—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        
        // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        console.group('üìã Copied Typography Fixes Object');
        console.log('–û–±—ä–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
        console.log(fixesObject);
        console.log('\nüí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:');
        console.log('1. –û–±—ä–µ–∫—Ç —É–∂–µ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à –∫–æ–¥');
        console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ fixes[].selector –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        console.log('3. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ suggestedCSS –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º');
        console.groupEnd();
        
      } catch (err) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = JSON.stringify(fixesObject, null, 2);
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        
        this.showNotification('üìã –û–±—ä–µ–∫—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (fallback)', 'success');
        console.log('Typography Fixes Object:', fixesObject);
      }
    },

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: ${type === 'success' ? '#00cc66' : '#0066cc'};
        color: white;
        padding: 12px 24px;
        border-radius: 6px;
        font-family: 'SF Mono', Consolas, monospace;
        font-size: 14px;
        z-index: 10001;
        box-shadow: 0 4px 16px rgba(0,0,0,0.3);
        animation: slideInDown 0.3s ease;
      `;
      
      notification.textContent = message;
      document.body.appendChild(notification);
      
      // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
      const style = document.createElement('style');
      style.textContent = `
        @keyframes slideInDown {
          from { opacity: 0; transform: translateX(-50%) translateY(-20px); }
          to { opacity: 1; transform: translateX(-50%) translateY(0); }
        }
      `;
      document.head.appendChild(style);
      
      // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    },

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    highlightElements(elements, issueIndex) {
      this.clearHighlights();
      
      elements.forEach((element, index) => {
        const overlay = document.createElement('div');
        overlay.className = 'typography-highlight';
        overlay.style.cssText = `
          position: absolute;
          pointer-events: none;
          background: rgba(255, 0, 150, 0.3);
          border: 2px solid #ff0096;
          border-radius: 4px;
          z-index: 9999;
          transition: all 0.3s ease;
        `;
        
        const rect = element.getBoundingClientRect();
        overlay.style.top = (rect.top + window.scrollY) + 'px';
        overlay.style.left = (rect.left + window.scrollX) + 'px';
        overlay.style.width = rect.width + 'px';
        overlay.style.height = rect.height + 'px';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
        const label = document.createElement('div');
        label.style.cssText = `
          position: absolute;
          top: -8px;
          left: -2px;
          background: #ff0096;
          color: white;
          padding: 2px 6px;
          font-size: 10px;
          border-radius: 3px;
          font-weight: bold;
        `;
        label.textContent = `${index + 1}`;
        overlay.appendChild(label);
        
        document.body.appendChild(overlay);
        this.state.highlightedElements.add(overlay);
        
        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
        setTimeout(() => {
          overlay.style.background = 'rgba(255, 0, 150, 0.15)';
        }, index * 100);
      });
      
      // –°–∫—Ä–æ–ª–ª –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
      if (elements.length > 0) {
        elements[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    },

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    clearHighlights() {
      this.state.highlightedElements.forEach(overlay => {
        overlay.remove();
      });
      this.state.highlightedElements.clear();
    },

    // –¶–≤–µ—Ç –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
    getSeverityColor(severity) {
      const colors = {
        critical: '#ff4444',
        warning: '#ffaa00',
        info: '#44aaff'
      };
      return colors[severity] || '#666';
    },

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    exportToConsole() {
      console.group('üîç Typography Analysis Report');
      
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
      ['critical', 'warning', 'info'].forEach(severity => {
        const issues = this.state.issues.filter(i => i.severity === severity);
        if (issues.length > 0) {
          console.group(`${severity.toUpperCase()} Issues (${issues.length})`);
          
          issues.forEach(issue => {
            console.log(`${issue.type}: ${issue.description}`);
            console.table(issue.elements.map(el => ({
              Tag: el.tagName.toLowerCase(),
              Classes: el.className || '(none)',
              Text: el.textContent?.trim().substring(0, 30) || '(empty)',
              Details: JSON.stringify(issue.details)
            })));
          });
          
          console.groupEnd();
        }
      });
      
      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      console.log('\nüìä Statistics:');
      console.table({
        'Total Font Combinations': this.state.fontMap.size,
        'Critical Issues': this.state.issues.filter(i => i.severity === 'critical').length,
        'Warnings': this.state.issues.filter(i => i.severity === 'warning').length,
        'Info': this.state.issues.filter(i => i.severity === 'info').length
      });
      
      console.groupEnd();
    },

    // –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    cleanup() {
      this.clearHighlights();
      const container = document.getElementById('typography-analyzer-results');
      if (container) {
        container.remove();
      }
    },

    // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
    run() {
      console.log('üöÄ Starting Typography Analysis...');
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.state.fontMap.clear();
      this.state.issues = [];
      this.state.fixableIssues = [];
      this.cleanup();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
      this.collectTypographyData();
      this.analyzeIssues();
      
      if (this.state.issues.length === 0) {
        console.log('‚úÖ Typography Analysis Complete: No critical issues found!');
        this.showNotification('‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–æ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.', 'success');
        return;
      }
      
      this.createInteractiveTable();
      console.log(`üìã Analysis complete. Found ${this.state.issues.length} issues to review.`);
    }
  };

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  TYPOGRAPHY_ANALYZER.run();
})();
