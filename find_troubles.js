(() => {
  const issues = [];
  const seenFonts = new Map();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
  function getCssSelector(el) {
    if (!(el instanceof Element)) return '';
    const path = [];
    while (el.nodeType === Node.ELEMENT_NODE) {
      let selector = el.nodeName.toLowerCase();
      if (el.id) {
        selector += '#' + el.id;
        path.unshift(selector);
        break;
      } else {
        let classNames = Array.from(el.classList);
        if (classNames.length > 0) selector += '.' + classNames.join('.');
        let sib = el, nth = 1;
        while (sib.previousElementSibling) {
          sib = sib.previousElementSibling;
          if (sib.nodeName === el.nodeName && Array.from(sib.classList).every(c => el.classList.contains(c))) nth++;
        }
        if (nth !== 1) selector += `:nth-of-type(${nth})`;
      }
      path.unshift(selector);
      el = el.parentNode;
    }
    return path.join(' > ');
  }

  // –°–±–æ—Ä –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  document.querySelectorAll("*").forEach(el => {
    const style = getComputedStyle(el);
    const fontFamily = style.fontFamily;
    const fontSize = style.fontSize;
    const fontWeight = style.fontWeight;
    const lineHeight = style.lineHeight;

    const key = `${fontFamily} | ${fontSize} | ${fontWeight} | ${lineHeight}`;
    if (!seenFonts.has(key)) seenFonts.set(key, []);
    seenFonts.get(key).push(el);
  });

  // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª–µ–π
  seenFonts.forEach((elements, key) => {
    const [fontFamily, fontSize, fontWeight, lineHeight] = key.split(" | ");
    const exampleElement = elements[0];
    const fullCssPath = getCssSelector(exampleElement);

    const primaryFont = fontFamily.split(',')[0].trim().toLowerCase();
    const hasInter = fontFamily.toLowerCase().includes('inter');
    const hasSansSerif = fontFamily.toLowerCase().includes('sans-serif');
    const hasSerif = fontFamily.toLowerCase().includes('serif');
    const hasMaterialSymbols = fontFamily.toLowerCase().includes('material symbols sharp');
    const hasFontAwesome = fontFamily.toLowerCase().includes('fontawesome');
    const hasMonospace = fontFamily.toLowerCase().includes('monospace');

    let isMixedFamily = false;
    if ((hasSansSerif || hasSerif) && !hasInter && !hasMaterialSymbols && !hasFontAwesome && !hasMonospace) isMixedFamily = true;
    if (fontFamily.includes("serif") && fontFamily.includes("sans")) isMixedFamily = true;
    if (hasInter && primaryFont !== 'inter' && !hasMaterialSymbols && !hasFontAwesome) isMixedFamily = true;

    if (isMixedFamily) issues.push({ type: "‚ö†Ô∏è –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–µ–º–µ–π—Å—Ç–≤–∞", detail: key, example: fullCssPath });
    if (parseFloat(lineHeight) === 0) issues.push({ type: "üí• line-height: 0px", detail: key, example: fullCssPath });
    else if (parseFloat(lineHeight) < parseFloat(fontSize) * 1.2) issues.push({ type: "üìè –ú–∞–ª–µ–Ω—å–∫–∏–π line-height", detail: key, example: fullCssPath });
    if (parseFloat(fontSize) === 0) issues.push({ type: "üí• font-size: 0px", detail: key, example: fullCssPath });
    if (fontWeight === "100" || fontWeight === "900") issues.push({ type: "üí° –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π font-weight", detail: key, example: fullCssPath });
    if (elements.length === 1 && !hasMaterialSymbols && !hasFontAwesome) issues.push({ type: "üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å (—Ç–æ–ª—å–∫–æ —É 1 —ç–ª–µ–º–µ–Ω—Ç–∞)", detail: key, example: fullCssPath });
  });

  // –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
  console.table(issues.map(issue => ({
    "–ü—Ä–æ–±–ª–µ–º–∞": issue.type,
    "–°—Ç–∏–ª–∏": issue.detail,
    "–ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç": issue.example
  })));
  console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è ‚Äî –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");

  // –°–±–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö CSS
  const loadedStylesheets = [];
  document.querySelectorAll('link[rel="stylesheet"]').forEach(link => loadedStylesheets.push({ type: 'Link (external stylesheet)', source: link.href }));
  document.querySelectorAll('style').forEach(style => {
    const contentPreview = style.innerHTML.substring(0, 100).trim();
    loadedStylesheets.push({ type: 'Style tag (inline/embedded)', source: `(Content preview: ${contentPreview}...)` });
  });
  console.log("\n--- –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ CSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ ---");
  console.table(loadedStylesheets);

  // üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ textarea
  const textReport = issues.map(issue => `${issue.type}\n  –°—Ç–∏–ª–∏: ${issue.detail}\n  –ü—Ä–∏–º–µ—Ä: ${issue.example}`).join("\n\n") || "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";

  (function copyToClipboard(text) {
    const textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.style.position = 'fixed';
    textarea.style.top = '0';
    textarea.style.left = '0';
    textarea.style.width = '1px';
    textarea.style.height = '1px';
    textarea.style.padding = '0';
    textarea.style.border = 'none';
    textarea.style.outline = 'none';
    textarea.style.boxShadow = 'none';
    textarea.style.background = 'transparent';
    document.body.appendChild(textarea);
    textarea.select();
    try {
      document.execCommand('copy');
      console.log("üìã –û—Ç—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.");
    } catch (err) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä:", err);
    }
    document.body.removeChild(textarea);
  })(textReport);

})();
