(() => {
  const issues = [];
  const seenFonts = new Map();

  // Function to generate a unique CSS selector for an element
  function getCssSelector(el) {
    if (!(el instanceof Element)) {
      return '';
    }
    const path = [];
    while (el.nodeType === Node.ELEMENT_NODE) {
      let selector = el.nodeName.toLowerCase();
      if (el.id) {
        selector += '#' + el.id;
        path.unshift(selector);
        break;
      } else {
        let classNames = Array.from(el.classList);
        if (classNames.length > 0) {
          selector += '.' + classNames.join('.');
        }
        let sib = el, nth = 1;
        while (sib.previousElementSibling) {
          sib = sib.previousElementSibling;
          // Check if previous sibling is of the same node name and has similar classes to avoid incorrect nth-of-type
          // This part is a bit simplified and might not be perfect for all complex cases
          if (sib.nodeName === el.nodeName && Array.from(sib.classList).every(c => el.classList.contains(c))) {
             nth++;
          }
        }
        if (nth !== 1) {
            selector += `:nth-of-type(${nth})`;
        }
      }
      path.unshift(selector);
      el = el.parentNode;
    }
    return path.join(' > ');
  }

  document.querySelectorAll("*").forEach(el => {
    const style = getComputedStyle(el);
    const fontFamily = style.fontFamily;
    const fontSize = style.fontSize;
    const fontWeight = style.fontWeight;
    const lineHeight = style.lineHeight;

    const key = `${fontFamily} | ${fontSize} | ${fontWeight} | ${lineHeight}`;

    if (!seenFonts.has(key)) {
      seenFonts.set(key, []);
    }
    seenFonts.get(key).push(el);
  });

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  seenFonts.forEach((elements, key) => {
    const [fontFamily, fontSize, fontWeight, lineHeight] = key.split(" | ");

    // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ "–ø—Ä–æ–±–ª–µ–º—ã"
    const exampleElement = elements[0];
    const fullCssPath = getCssSelector(exampleElement);

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–µ —Å–µ–º–µ–π—Å—Ç–≤–∞
    const primaryFont = fontFamily.split(',')[0].trim().toLowerCase();
    const hasInter = fontFamily.toLowerCase().includes('inter');
    const hasSansSerif = fontFamily.toLowerCase().includes('sans-serif');
    const hasSerif = fontFamily.toLowerCase().includes('serif');
    const hasMaterialSymbols = fontFamily.toLowerCase().includes('material symbols sharp');
    const hasFontAwesome = fontFamily.toLowerCase().includes('fontawesome');
    const hasMonospace = fontFamily.toLowerCase().includes('monospace');


    let isMixedFamily = false;
    // –ï—Å–ª–∏ sans-serif –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ Inter –∏–ª–∏ –∏–∫–æ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–º–µ—à–∞–Ω–Ω—ã–º.
    // –ò—Å–∫–ª—é—á–∞–µ–º monospace, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –¥–ª—è –∫–æ–¥–∞.
    if (hasSansSerif && !hasInter && !hasMaterialSymbols && !hasFontAwesome && !hasMonospace) {
        isMixedFamily = true;
    }
    // –ï—Å–ª–∏ serif –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∞ Inter –∏–ª–∏ –∏–∫–æ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏.
    if (hasSerif && !hasInter && !hasMaterialSymbols && !hasFontAwesome && !hasMonospace) {
        isMixedFamily = true;
    }
    // –°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤ –æ–¥–Ω–æ–º fontFamily –µ—Å—Ç—å –∏ "serif", –∏ "sans".
    if (fontFamily.includes("serif") && fontFamily.includes("sans")) {
        isMixedFamily = true;
    }
     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ Inter –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –≤ —Å–ø–∏—Å–∫–µ, –∏ –ø—Ä–∏ —ç—Ç–æ–º –ø–µ—Ä–≤—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∫–æ–Ω–Ω—ã–º
    if (hasInter && primaryFont !== 'inter' && !hasMaterialSymbols && !hasFontAwesome) {
        isMixedFamily = true;
    }

    if (isMixedFamily) {
      issues.push({ type: "‚ö†Ô∏è –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–µ–º–µ–π—Å—Ç–≤–∞", detail: key, example: fullCssPath });
    }

    if (parseFloat(lineHeight) === 0) {
        issues.push({ type: "üí• line-height: 0px", detail: key, example: fullCssPath });
    } else if (parseFloat(lineHeight) < parseFloat(fontSize) * 1.2) {
      issues.push({ type: "üìè –ú–∞–ª–µ–Ω—å–∫–∏–π line-height", detail: key, example: fullCssPath });
    }
    if (parseFloat(fontSize) === 0) {
        issues.push({ type: "üí• font-size: 0px", detail: key, example: fullCssPath });
    }
    if (fontWeight === "100" || fontWeight === "900") {
      issues.push({ type: "üí° –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π font-weight", detail: key, example: fullCssPath });
    }
    // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–∞—Ç—å –æ–± —É–Ω–∏–∫–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∫–æ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, —Ç–∞–∫ –∫–∞–∫ –∏–∫–æ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ –ø—Ä–∞–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.
    if (elements.length === 1 && !hasMaterialSymbols && !hasFontAwesome) {
      issues.push({ type: "üîç –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å (—Ç–æ–ª—å–∫–æ —É 1 —ç–ª–µ–º–µ–Ω—Ç–∞)", detail: key, example: fullCssPath });
    }
  });

  // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
  console.table(
    issues.map(issue => ({
      "–ü—Ä–æ–±–ª–µ–º–∞": issue.type,
      "–°—Ç–∏–ª–∏": issue.detail,
      "–ü—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç": issue.example // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø–æ–ª–Ω—ã–π CSS-–ø—É—Ç—å
    }))
  );

  console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è ‚Äî –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");

  // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö CSS —Ñ–∞–π–ª–∞—Ö
  const loadedStylesheets = [];

  // –ò–∑–≤–ª–µ–∫–∞–µ–º <link> —Ç–µ–≥–∏
  document.querySelectorAll('link[rel="stylesheet"]').forEach(link => {
    loadedStylesheets.push({ type: 'Link (external stylesheet)', source: link.href });
  });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º <style> —Ç–µ–≥–∏
  document.querySelectorAll('style').forEach((style, index) => {
    // –î–ª—è <style> —Ç–µ–≥–æ–≤ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∏–ª–∏
    const contentPreview = style.innerHTML.substring(0, 100).trim();
    loadedStylesheets.push({ type: `Style tag (inline/embedded)`, source: `(Content preview: ${contentPreview}...)` });
  });

  console.log("\n--- –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ CSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ ---");
  console.table(loadedStylesheets);

})();
